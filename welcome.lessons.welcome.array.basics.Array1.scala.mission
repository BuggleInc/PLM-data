<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
  </style>
</head><body>
<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h1>Arrays e nós</h1>

O objetivo deste exercício é reproduzir o padrão da primeira linha nas
outras linhas com um deslocamento de uma célula (veja a aba Objetivo
para detalhes). A maior diferença entre este exercício e os outros
sobre padrões é que você tem que ler o padrão (na primeira linha)
antes de reproduzí-lo. Você não pode fazer de outro jeito por que o
mesmo código será executado em três mundos diferentes, cada um com seu
próprio padrão.

<p>Uma solução é ler a próxima célula, e copiar ela na posição antes de
voltar para ler a segunda célula. Mas já que é proibido usar os
métodos de teletransporte de buggle para uma posição específica
(<code>setPos()</code> e similares), esta abordagem seria muito
difícil de implementar. </p>
 
<p>O mais simples é armazenar a sequência de cores que constituem o
padrão inteiro numa
<b>array</b>.  Mas antes de
fazer isto, devemos aprender um pouco sobre o que
arrays são.</p>

<h2>Arrays</h2> 

<p>Uma array é uma sequência
ordenada de variáveis que ficam juntas. é similar a uma estante onde
em cada prateleira se coloca um valor separado. Cada variável da
sequência é identificada por sua posição, e pode armazenar um valor
específico. todas as células da array devem armazenar
valores do mesmo tipo por que arrays são homogêneas em Scala. É
possível burlar esta restrição usando tipos de dados
<code>Any</code> que contenham
 qualquer outro tipo de dados.  Entretanto, é boa prática fazer o tipo de uma array o
mais específico possível, i.e., se você planeja armazenar alguns
inteiros na sua array, faça dela uma array de inteiros, não de
Any. </p>

<div style="text-align:center"><img src="lessons/welcome/array/array.png"/></div>

<p>T é o nome da array,
T(0) é o nome da primeira célula,
T(1) é o nome da segunda célula,
T(2) da terceira e etc. E sim, a
primeira célula é numerada T(0) e a
última de uma array de tamanho N é
T(N-1). Pode parecer estranho
contar a partir de 0 e não de 1 como normalmente, mas por motivos
históricos isto agora é inevitável.</p>

<h3>Uso básico</h3>

<p>Podemos usar uma variável inteira <i>i</i> para acessar com
T(i) as células: quando o valor de
<i>i</i> é 0, T(i) acessa
T(0); quando o valor de <i>i</i> é
10, T(i) acessa
T(10). Sizemos que <i>i</i> é o
<b>índice</b> em T.
<code>T(i)</code> pode ser usada
simplesmente como qualquer variável. Podemos configurar um novo valor:</p> 
<pre>T(i) = 78</pre>

<p>Podemos recuperar e usar seu valor: </p>
<pre>x = T(i)</pre>

<p>Podemos testar este valor:</p>
<pre>if (T(i) > 0) {
    // instruções...
}</pre>

<p>É muito fácil percorrer toda a
array, por exemplo para iniciar as
células.</p>

<pre>for (i &lt;- 0 to T.length-1) {
   T(i) = 3
}</pre>

<p>The notation <code>T.length</code> retrieves the length of the
array T,  allowing to build a classical for loop easily.
 Don't
forget to start at <code>0</code> and stop at <code>T.length-1</code>
instead of <code>1</code> to <code>T.length</code> however.</p>

<p>Se você quer simplesmente iterar nos valores de T sem controlar o
índice, pode simplesmente escrever:</p>
<pre>for (i &lt;- T) {
  ação()
}</pre>
<p>
Isto é na verdade muito similar à construção
anterior. Simplesmente, <code>i to
j</code> retorna um conjunto de inteiros sobre os quais o loop for
itera. Na verdade, Scala oferece formas muito mais elegantes de
percorrer arrays e outras coleções de
dados, mas isto fica para um conjunto específico de exercícios (que
ainda será escrito no PLM).</p>


<h3>Declarando uma array</h3>

 
<p>To declare a variable named <b>T</b> that can store an array of integers,
one should write:</p>
<pre>var T:Array[Int]</pre>

<p> A notação <code>[Int]</code> especializa o
tipo Array (que é genérico), especificando que cada célula desta array
é um inteiro. Um array de booleanos deve ser escrito simplesmente como
<code>Array[Boolean]</code>.
</p>

<h3>Alocando uma array</h3>

<p>Declarar uma variável <code>T</code> que armazena uma array apenas
reserva o <b>nome</b> <code>T</code> para uso futuro, mas não reserva
a área de memória para armazenar as células. A array ainda não está
inicializada: ela não tem qualquer valor. O que significa
<code>T(4)</code> se ainda não dissemos que
a array tem 5 células?</p>

<p>Primeiramente, temos que dar um valor a <code>T</code>:</p>
<pre>var T = new Array[Int](10)</pre>

<p><code>new</code> (novo) significa que nós queremos criar algo, e
<code>Array[Int](10)</code> significa
que é uma array de 10 valores inteiros. Como resultado, uma array de
10 células para valores inteiros é criada na memória, e a variável
<code>T</code> <b>faz referência</b> a esta array.</p>

<p>O tamanho de uma array é fixo e não pode ser mudado depois da criação
da array. O tamanho de uma array <code>T</code> pode ser recuperado ao
se consultar a variável <code>T.length</code>.</p>

<p>While allocating, you can specify the size with a variable:
<code>var T = new
Array[Int](i);</code> In this case, the array's size will be set to the
value of <code>i</code> <i>when <code>new</code> gets called</i>.  The size
of the array still cannot be modified: even if the variable <code>i</code>
changes afterward, the size remains to the value given when it was
allocated.  </p>

<h4>Declaração e inicialização</h4>
<p>Se você sabe previamente o conteúdo da sua array, você pode declarar,
alocar e inicializar ela tudo de uma vez:</p>
<pre>var T = Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</pre>

<p>Para saber o tamanho da array para alocar, o compilador conta os
valores dados. Este código é equivalente a:</p>
<pre>var T = new Array[Int](10);
T(0) = 1
T(1) = 2
...
T(9) = 10</pre>

<p>também é equivalente a:</p>
<pre>var T = new Array[Int](10);
for (i &lt;- 0 to T.length-1) {
  T(i) = i+1
}</pre>


<!-- end of java|scala. python comes back -->


<h3>Arrays e parâmetros de métodos</h3>
<p>Não tem nenhum problema passar uma
array para um método como
parâmetro. Este método pode então usar este parâmetro como se ele
fosse definido localmente:</p>
<pre>def has42First(array:Array[Int]):Boolean = {
  return array(0) == 42
}</pre>

<p>No lado de quem invoca também é bastante simples:</p>
<pre>var tab = new Array[Int] (10)
<span class="comment">// inicialização de valores omitida</span>
if (has42First(tab)) {
   <span class="comment">// faz algo</span>
}</pre>



<p>Métodos também podem retornar
arrays como resultado sem nenhuma
complicação. Aqui está um método que retorna uma
array do tamanho pedido, preenchido
com 42s.</p>

<pre>def fill42(size:Int):Array[Int] = {
    var res = new Array[int] (size)
    for (i &lt;- 0 to size -1) {
        res(i) = 42;
    }
    return res;
}</pre>

<h2>Objetivo deste exercício</h2>

<p>Finalmente! Depois desta longa explicação, podemos voltar ao exercício.</p>
<p>Sua missão é bastante simples na verdade. Seu código deve guardar o
padrão de cores observado na primeira linha numa
array.   Para isto, você
deve declarar e alocar uma array de <code>Cor</code>. Mas atencção,
existem vários mundos, de diferentes tamanhos; use
<code>getAlturaDoMundo()</code> para recuperar o tamanho do mundo
atual. Uma que a array esteja alocada, preencha ela lendo a cor do
chão em cada um dos pontos (com <code>getCorDoChão()</code>).</p>  

<p>Uma vez que você conseguiu ler e gravar o padrão na primeira linha,
você tem que reaplicar o padrão nas outras linhas, por exemplo
executando <code>getAlturaDoMundo()</code> vezes um método escrito
especificamente para isto.</p> 
</body></html>