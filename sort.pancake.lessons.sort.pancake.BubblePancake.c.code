void solve() {
	/* BEGIN SOLUTION */
	int rank,stackSize, sorted;

    stackSize = getStackSize();
    sorted = 0;

    while (!sorted) {

        sorted = 1;

        for (rank = 0 ; rank < stackSize -1; rank++ ) { 

            if(getPancakeRadius(rank) > getPancakeRadius(rank + 1)) {
                // When the pancake above is bigger than the next one...
                
                sorted = 0; // We have to check all the pancakes again next time
                
                flip(rank + 2); // Flip all the pancakes to get the two get on top
                flip(2); // Flip the two pancakes to sort
                flip(rank + 2); // Flip all the pancakes back in place
            }
        }
    }
    
    return EXIT_SUCCESS;
	/* END SOLUTION */
}
