<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
  </style>
</head><body><!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h1> and Knotting</h1>

The goal of this exercise is to reproduce the pattern of the first row in
the other rows with a shift of one cell (see the Objective tab for
details). The biggest difference between this exercise and the others we had
on patterns is that you have to read the pattern (on first row) before
reproducing it. You cannot do otherwise because the same code will be
executed on three different worlds, each of them having a specific
pattern.

<p>One solution is to read the next cell, and go copy it in position before
coming back to read the second cell. But since it is forbidden to use the
methods to teleport the buggle to a specific position (<code>setPos()</code>
and similar), this approach will be a pain to implement. </p>
 
<p>The simplest is to store the sequence of colors that constitute 
the whole pattern in an .
But before we can do so, we should learn a bit what  are.</p>

<h2></h2> 

<p> is an ordered sequence of variables that go together.
It is somehow similar to a shelve where each level can store a separate value. Each 
variable of the sequence is identified by its position, and can store
a specific value. . It is possible to trick this 
restriction by using the datatype <code></code> 
that can contain  any other datatype.  It is however a good practice to make the type of an array 
as specific as possible, i.e., if you plan to store some integers in your array, make it an 
array of integers, not of .[/!]
</p>

<div style="text-align:center"><img src="lessons/welcome/array/array.png"/></div>

<p>T is the 's name, 
 is the name of the first cell, 
 the name of the second cell, 
 the third one, etc. And yes, the first cell is
numbered  while the last one of  
of size N is . It may seem funny to count starting from 0 and not from 1 
as usual, but some historical reasons make it unavoidable here.</p>

<h3>Basic usage</h3>

<p>We can use an integer variable <i>i</i> to access with  to the 
cells: when the value of <i>i</i> is 0, then  accesses 
; 
when the value of <i>i</i> is 10, then  accesses 
. 
<i>i</i> is said to be the <b>index</b> in T. 
<code></code> can be used just like any
variable. We can set a new value:</p> 
<pre> = 78</pre>

<p>We can retrieve and use its value: </p>
<pre>x = </pre>

<p>We can test this value:</p>
<pre>if ( > 0) 
     instructions...
</pre>

<p>It is very easy to traverse the whole , for 
example to initialize each cells.</p>

<pre>
    = 3
</pre>

<p>
 
allowing to build a classical for loop easily. 
 
</p>

<p>If you just want to iterate over the values of T without keeping track of their index, you can simply write:</p>
<pre>
  action()
</pre>
<p>

 offers much more elegant ways to traverse  and 
other data collections, but this should be the topic of a specific set of exercises (that are still to be 
written in PLM).[/!]</p>


<h3>Declaring </h3>


 
<!-- end of java|scala. python comes back -->

<h3> and method parameters</h3>
<p>It is perfectly OK to pass  to a method as a parameter. 
This method can then use this parameter as if it were defined locally:</p>
<pre></pre>

<p>On the caller side, that also very simple:</p>
<pre>
if (has42First(tab))
   <span class="comment"> do something</span>
</pre>



<p>Methods can also return  as result without any complication. 
Here is a method that returns  of the requested size, filled with 42s.</p>

<pre></pre>

<h2>Goal of this exercise</h2>

<p>At least! After this long explanation, we can come back to the exercise.</p>
<p>Your mission is rather simple actually. 
Your code should save the color pattern observed on the first row into . 

</p>  

<p>Once you managed to read and save the pattern on the first row, you have to reapply the 
pattern on every rows, for example by executing <code>getWorldHeight()</code> times 
a method written specifically for this.</p> 
</body></html>