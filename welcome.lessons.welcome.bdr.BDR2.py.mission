<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
.Java   {visibility: visible; color:#FF0000}
.java   {visibility: visible; color:#FF0000}
.python {visibility: visible; color:#008000}
.Python {visibility: visible; color:#008000}
.scala  {visibility: visible; color:#0000FF}
.Scala  {visibility: visible; color:#0000FF}
  </style>
</head><body>
<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h2>Buggle Dance Revolution 2 (BDR2)</h2>

<font color="EEEEEE">
<p>Le BDR, c'est cool, mais c'est un peu le chaos. Tout d'abord, les buggles
gigotent en tout sens, et en plus, le code que vous avez écrit pour les
faire bouger est très difficile à lire. Voici un nouveau monde de BDR, où
les buggles vont faire une gentille petite ronde plus reposante. Nous
profiterons de cette accalmie pour nettoyer un peu le code grâce aux
nouveaux éléments que nous allons maintenant étudier.</p>

<h3><font color="FFFF00">Conditionnelle <code>switch</code></font><font color="0000FF">Les filtrages</font></h3>

<p>Le plus difficile à lire du code précédent est certainement la cascade de
conditionnelles. Quelque part dans votre programme, vous avez sans doute
écrit quelque chose comme:</p>

<pre>if (<font color="FFFF00">getIndication() == 'R'</font><font color="0000FF">litMessage() == "R"</font>) {
  droite();
  avance();
} else if (<font color="FFFF00">getIndication() == 'L'</font><font color="0000FF">litMessage() == "L"</font>) {
  gauche();
  avance();
} else if (<font color="FFFF00">getIndication() == 'I'</font><font color="0000FF">litMessage() == "I"</font>) {
  retourne();
  avance();
<span class="comment">/* d'autre if */</span>
} else {
  fini = true;
}
</pre>

<p>À la première lecture du code, il n'est pas évident qu'il ne s'agit que d'un
choix avec 4 branches en fonction du résultat de
<font color="FF0000">getIndication()</font><font color="0000FF">litMessage()</font>.
Pour améliorer ceci, nous allons utiliser <font color="FF0000">un <code>switch</code>,
dont la syntaxe est la suivante en Java.</font>
<font color="0000FF"> un filtrage (pattern matching en anglais), qui est une construction
très agréable généralisant le <code>if</code>. Il s'agit sans aucun doute de
l'un des avantages majeurs du langage Scala par rapport à d'autres tels que
le Java ou le Python. Cette construction n'est cependant pas révolutionnaire
puisqu'elle existe depuis assez longtemps dans des langages comme OCaml ou
Haskell, mais il n'empêche. Elle est carrément cool!</font></p>
</font> <font color="FFFF00">
<pre>
switch (<b>expression</b>) {
  case <b>premierValeur</b>: 
    <b>queFaireSiExpressionVautPremiereValeur();</b>
    break;
  case <b>deuxiemeValeur</b>: 
    <b>queFaireSiExpressionVautDeuxiemeValeur();</b>
    break;
  case <b>troisiemeValeur</b>: 
    <b>queFaireSiExpressionVautTroisiemeValeur();</b>
    break;
    /* autant de cas sur le même modèle qu'on le souhaite */
  default: 
    <b>queFaireSiExpressionVautAucuneDesValeursProposees();</b>
}</pre>

<p>Remarquez que chaque branche du <tt>switch</tt> doit être terminée par un
<code>break</code>. Si on l'oublie, la machine continue d'exécuter le cas
suivant dans la liste quand elle a fini le code du cas où elle a sauté dans
le switch. Il y a même quelques <b>très rares</b> cas où ce comportement est
pratique.</p>

<p>On peut réécrire le code BDR précédent bien plus clairement grâce à la
construction <tt>switch</tt> de la façon suivante.</p>

<pre>switch (getIndication()) {
  case 'R':
    droite(); 
    <font color="00FF00">avancePas()</font><font color="FF0000">avance()</font>; 
    break;
  case 'L':
    gauche();
    <font color="00FF00">avancePas()</font><font color="FF0000">avance()</font>; 
    break;
  case 'I':
    retourne();
    <font color="00FF00">avancePas()</font><font color="FF0000">avance()</font>;
    break;
  default: 
    return;
}</pre>
</font> <font color="0000FF">
<pre><i>expression</i> <b>match</b> {
  <b>case</b> <i>valeur possible</i>  <b>=></b> instructions
  <b>case</b> <i>autre valeur</i>     <b>=></b> d'autres instructions
  <b>case</b> <i>troisième valeur</i> <b>=></b> encore d'autres instructions
  <b>case _                 =></b> instructions par défaut
}
</pre>
<p>L'expression fournie avant le mot-clé <code>match</code> est évaluée, et
ensuite, les branches sont évaluées les unes après les autres jusqu'à en
trouver une où la valeur entre le <code>case</code> et le <code>=&gt;</code>
correspond à la valeur de l'expression. Le symbole <code>_</code> agit comme
un joker qui correspond à tout. Cela veut dire que la dernière ligne telle
qu'elle est écrite correspond toujours à la valeur fournie, quelle qu'elle
soit. Voici un petit exemple où une variable <code>nom</code> est mis en
correspondance.</p>
<pre>nom match {
  case "Martin" => println("Salut Martin, comment vas-tu?")
  case "Gerald" => println("He Gerald! Ça va?")
  case _            => println("Bonjour, étranger.")
}</pre>

<p>Il est aussi possible d'avoir plusieurs instructions par branches, et même
d'avoir plusieurs valeurs sur une branche donnée, séparées par le caractère
<code>|</code>.</p>
<pre>nom match {
  case "Martin" | "Gerald" => println("Bonjour "+nom+", entre."); ouvreLaPorte()
  case _                            => println("Bonjour étranger. Passe ton chemin sans entrer."); fermeLaPorte()
}</pre>

<p>Il est même possible d'ajouter des gardes à vos branches. Il s'agit de
conditions supplémentaires qui doivent être respectées pour que la branche
soit appliquée. C'est par exemple pratique pour faire du filtrage sur un
ensemble de valeurs.</p>
<pre>age match {
  case i if i&lt;10 => println("Salut gamin!")
  case i if i&lt;20 => println("Salut mec")
  case i if i&lt;30 => println("Bonjour jeune homme")
  case _           => println("Bonjour monsieur")
}</pre>
<p>Remarquez qu'il n'est pas nécessaire de vérifier à la seconde ligne que la
valeur est supérieure à 10 puisque les lignes sont considérées dans
l'ordre. Si la seconde ligne est considérée, c'est que la première ne
correspondait pas.</p>

<p>Enfin, il est même possible de filtrer sur plusieurs variables à la fois!</p>
<pre>(x,y) match {
 case (0,0) => println("C'est le point origine")
 case (_,0) => println("C'est un point de l'ordonnée")
 case (0,_) => println("C'est un point de l'abscisse")
 case (_,_) => println("C'est un point quelconque")
}</pre>

<p>Je vous avais bien dit que le filtrage scala était une construction
surpuissante ! Je l'adore !</p>
</font>

<h3>Objectif de cet exercice</h3>
<p><font color="EEEEEE">Appliquez les améliorations que nous venons de voir pour
adapter le code de votre buggle au nouveau pas de danse explicité
ci-dessous.</font>
<font color="008000">Nous allons maintenant apprendre un nouveau pas de danse à nos
buggles. Il est un peu plus complexe, mais sinon, c'est toujours la même
histoire.</font>
Remarquez qu'il est maintenant possible d'avancer jusqu'à 6 cases à la fois.</p>

<table border="1">
 <tr><td>Indication</td>
     <td>Quoi faire</td></tr>

 <tr><td><font color="FFFF00">'R'</font><font color="0080FF">"R"</font></td><td>Tourner à droite et avancer d'une case</td></tr>
 <tr><td><font color="FFFF00">'L'</font><font color="0080FF">"L"</font></td><td>Tourner à gauche et avancer d'une case</td></tr>
 <tr><td><font color="FFFF00">'I'</font><font color="0080FF">"I"</font></td><td>Se retourner (faire demi-tour) et avancer d'une case</td></tr>

 <tr><td><font color="FFFF00">'A'</font><font color="0080FF">"A"</font></td><td>Avancer d'une case</td></tr>
 <tr><td><font color="FFFF00">'B'</font><font color="0080FF">"B"</font></td><td>Avancer de deux cases</td></tr>
 <tr><td><font color="FFFF00">'C'</font><font color="0080FF">"C"</font></td><td>Avancer de trois cases</td></tr>
 <tr><td><font color="FFFF00">'D'</font><font color="0080FF">"D"</font></td><td>Avancer de quatre cases</td></tr>
 <tr><td><font color="FFFF00">'E'</font><font color="0080FF">"E"</font></td><td>Avancer de cinq cases</td></tr>
 <tr><td><font color="FFFF00">'F'</font><font color="0080FF">"F"</font></td><td>Avancer de six cases</td></tr>

 <tr><td><font color="FFFF00">'Z'</font><font color="0080FF">"Z"</font></td><td>Reculer d'une case</td></tr>
 <tr><td><font color="FFFF00">'Y'</font><font color="0080FF">"Y"</font></td><td>Reculer de deux cases</td></tr>
 <tr><td><font color="FFFF00">'X'</font><font color="0080FF">"X"</font></td><td>Reculer de trois cases</td></tr>
 <tr><td><font color="FFFF00">'W'</font><font color="0080FF">"W"</font></td><td>Reculer de quatre cases</td></tr>
 <tr><td><font color="FFFF00">'V'</font><font color="0080FF">"V"</font></td><td>Reculer de cinq cases</td></tr>
 <tr><td><font color="FFFF00">'U'</font><font color="0080FF">"U"</font></td><td>Reculer de six cases</td></tr>
 <tr><td><i>(n'importe quoi d'autre)</i></td><td>Arrêter de danser.</td></tr>

</table>

<p>Quand votre programme fonctionne de nouveau, passez à l'exercice suivant.</p>
</body></html>