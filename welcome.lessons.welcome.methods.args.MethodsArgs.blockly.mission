
<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h2>M?thodes avec param?tres</h2>

<p>N'?tes vous pas fatigu? d'?crire encore et encore le code qui permet
d'avancer ou de reculer d'un nombre pr?d?termin? de pas ? Oui, mais ?crire
les m?thode <tt>avance2()</tt>, <tt>avance3()</tt>, <tt>avance4()</tt>, et
<tt>recule2()</tt>, <tt>recule3()</tt>, <tt>recule4()</tt>, et ainsi de
suite, ?a ne constitue pas un r?el gain de temps. Et puis, c'est carr?ment
moche !</p>

<p>Heureusement, il est possible de donner des <b>param?tres</b> ? vos
m?thodes. Il faut marquer leur type et leur nom entre les parenth?ses qui
suivent le nom de la m?thode. Ensuite, on peut les utiliser dans le corps de
la fonction comme s'il s'agissait de variables d?finies ici.</p>

<pre>diviseParDeux(x) 
     return x / 2
</pre>

<p>? l'usage, il faut indiquer les valeurs qu'elles doivent prendre entre les
parenth?ses de l'appel.</p>
<pre>resultat = diviseParDeux(3.14)</pre>

<p>Si on veut avoir plusieurs param?tres, il faut les s?parer par des virgules,
lors de la d?claration comme lors de l'appel.</p>

<pre>


     return x / y
</pre>
<pre>

</pre>





<h3>Objectif de cet exercice</h3>
<p>Cette fois, vous devez ?crire une m?thode
<code>

 </code> qui se d?place de
<code>nbPas</code> pas. Si <code>versLAvant</code> est vrai, il faut avancer
de ce nombre de pas; dans le cas contraire, il faut reculer.</p>

<p>Cette fois, il y a un seul monde, et sept buggles, qui ex?cutent toutes le
code que vous allez ?crire.
Cet exercice ne devrait pas vous poser de probl?me particulier.</p>
