AlgCombSort:6: error: type mismatch;
 found   : Int
 required: ?{def /(x$1: ? >: Double(1.3)): ?}
Note that implicit conversions are not applicable because they are ambiguous:
 both method int2long in object Int of type (x: Int)Long
 and method int2float in object Int of type (x: Int)Float
 are possible conversion functions from Int to ?{def /(x$1: ? >: Double(1.3)): ?}
	if(gap>1) gap=gap/1.3;
                      ^AlgCombSort:6: error: overloaded method value / with alternatives:
  (x: Int)Int <and>
  (x: Char)Int <and>
  (x: Short)Int <and>
  (x: Byte)Int
 cannot be applied to (Double)
	if(gap>1) gap=gap/1.3;
                         ^AlgCombSort:7: error: not found: value i
	i=0;
        ^AlgCombSort:8: error: not found: value i
	while(i+gap<getValueCount()){
              ^AlgCombSort:10: error: not found: value i
		if(isSmaller(i+1,i)){
                             ^AlgCombSort:11: error: not found: value i
			swap(i,i+1);
                             ^AlgCombSort:14: error: not found: value i
		i++;	
                ^