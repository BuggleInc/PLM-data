<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
  </style>
</head><body>
<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h2>Instructions conditionnelles</h2>

Les programmes faits d'une simple suite d'instructions comme celui de
l'exercice précédent sont bien ennuyeux. Ils font toujours la même chose, et
ne peuvent pas réagir aux conditions extérieurs. Une <b>instruction
conditionnelle</b> permet au programme de s'adapter en disant quelque chose
comme <i>S'il pleut, prend un parapluie</i>. 

<p>La syntaxe en python est la suivante :</p>

<pre>if <b>condition</b>:
&nbsp;&nbsp;&nbsp;&nbsp;<b>aFaireSiVraie()</b>
&nbsp;&nbsp;&nbsp;&nbsp;<b>aFaireEnsuiteSiVraie()</b>
<b>aFaireDansTousLesCas()</b></pre>

<p>Le mot <code>if</code> signifie «si» en anglais. Si la condition est vraie,
alors le code du bloc suivant sera exécuté, puis l'exécution se poursuivra
avec la suite du code, après le bloc. Sinon, si la condition est fausse, le
bloc suivant sera ignoré et l'exécution passera directement au code placé
après lui. Le bloc conditionnel peut contenir plusieurs instructions. Il
peut même contenir d'autre tests, avec leurs sous-blocs associés.</p>

<p>Dans cet exemple, les instructions <code>aFaireSiVraie()</code> et
<code>aFaireSiVraie()</code> seront exécutée si (et seulement si) la
condition est vraie tandis que l'instruction
<code>aFaireDansTousLesCas()</code> sera exécutée que la condition soit
vraie ou fausse. 
</p>

<p>In python, the blocks of code are 
 marked by the indentation: every lines that
are a bit shifted to the right with white spaces belong to the block. Quite
often, people use 4 spaces for indentation, but it works if you use more or
less spaces. Simply, any lines of the block must use the same amount of
spaces.  The end of Python code blocks are not marked by any specific char.
Indenting lines starts a block and unindenting ends it. Do not forget the
colon (:) at the end of the <code>if</code> line, python needs it to know
that a new block begins. The fact that python relies on indentation to
delimit blocks is a very good property for beginners: it will force you to
adhere to strict code presentation standards. It is very easy to get
lost in your own code if it's not properly indented, so you want to clean it
up so that working on your code remains pleasant and productive.</p>


<p class="python">Toutes les instructions d'un bloc doivent avoir la même indentation, et il
n'est pas possible de couper un bloc. Les deux exemples suivants de code
sont incorrects et vont générer des erreurs.</p>
<pre class="python">if <b>condition</b>:
&nbsp;&nbsp;&nbsp;&nbsp;<b>quoiFaire()</b>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>quoiFaireEnsuite()</b> <span class="comment"># une espace de trop</span>
<b>quoiFaireDansTousLesCas()</b>
</pre>
<pre class="python">if <b>condition</b>:
&nbsp;&nbsp;&nbsp;&nbsp;<b>quoiFaire()</b>
<b>quoiFaireDansTousLesCas()</b>
&nbsp;&nbsp;&nbsp;&nbsp;<b>quoiFaireEnsuite()</b> <span class="comment"># Ce bloc n'est rattaché à aucune ligne de condition</span>
</pre>

<p>La condition doit être une expression de type
<code>Boolean</code>
(expression booléenne).  Le sous-bloc sera exécuté seulement si cette
expression vaut <code>True</code>
(vrai), et il sera ignoré si sa valeur est
<code>False</code> (faux).
<code>True</code> et
<code>False</code> sont des constantes
définies directement par python, tout comme 0 ou 1 en mathématiques.</p>

<p>La condition peut aussi être une variable booléenne (nous reviendrons sur
les variables dans un autre exercice, pas de panique) ou un test
arithmétique,comme <code>x == 5</code>, qui teste si la valeur actuelle de
<tt>x</tt> est 5, ou bien comme <b>!=</b> (teste l'inégalité, càd si le
membre gauche a une valeur différente du membre droit), <b>&lt;</b>
(inférieur à), <b>&gt;</b> (supérieur à), <b>&lt;=</b> (inférieur ou égal
à), <b>&gt;=</b> (supérieur ou égal à).</p>

<p>Attention au piège classique, qui consiste à tester l'égalité d'une variable
avec = au lieu de ==. Heureusement, l'interpréteur détecte le plus souvent ce
problème et vous le signale, mais pas tout le temps. Si la variable est de
type booléen, il peut se faire prendre au piège, et il convient donc d'être
attentif...</p>

<p>La condition peut également être un appel à certaines méthodes
particulières, dont le résultat est un booléen. Par exemple, la méthode
<tt>estFaceMur()</tt> de la buggle renvoie
vrai si la buggle est face à un mur, et
faux sinon.</p>

<p>Enfin, il est possible de construire une condition composée de plusieurs
sous-conditions reliées par des opérations booléennes:</p>
<ul>
  <li><code>cond1 and cond2</code> est vraie si
<tt>cond1</tt> <b>et</b> <tt>cond2</tt> est vraie (d'ailleurs, si
<tt>cond1</tt> est fausse, <tt>cond2</tt> n'est même pas évaluée puisqu'on
sait déjà que la conjonction des deux propositions ne peut pas être vraie).</li> 
  <li><code>cond1 or cond2</code> est vraie si
<tt>cond1</tt> <b>ou</b> <tt>cond2</tt> est vraie (d'ailleurs, si
<tt>cond1</tt> est vraie, <tt>cond2</tt> n'est même pas évaluée puisqu'on
sait déjà que la disjonction des deux propositions est vraie).</li>
  <li><code>not cond</code> est vraie si
<tt>cond</tt> ne l'est pas.</li>
  <li>Quand les expressions deviennent compliquées, il est préférable d'ajouter
quelques parenthèses pour lever toute ambiguïté sur l'ordre
d'évaluation. N'hésitez pas à mettre suffisamment de parenthèses pour la
rendre plus lisible.</li>
</ul> 

<p>Pour finir, il est possible de spécifier ce qu'il faut faire quand la
condition est fausse, en utilisant la syntaxe suivante («else» signifie
«sinon» en anglais). Dans ce cas, l'instruction
<code>aFaireSiLaConditionEstFausse()</code> ne sera exécutée que si la
condition est fausse.</p>
 <pre>if (<b>condition</b>):
&nbsp;&nbsp;&nbsp;&nbsp;<b>aFaireSiLaConditionEstVraie()</b>
else:
&nbsp;&nbsp;&nbsp;&nbsp;<b>aFaireSiElleEstFausse()</b></pre>

<p class="Python">N'oubliez pas les deux points (:) après le else, ils indiquent qu'un nouveau
bloc débute.</p>

<h3>Objectif de cet exercice</h3><a name="Objectifs"/> Si la buggle est face à un mur, il faut reculer d'un
pas; Sinon, il faut avancer d'un pas.
Pour savoir si on est face à un mur, il suffit d'utiliser la méthode
prédéfinie des buggles nommée <code>estFaceMur()</code>. 

<p>Cet exercice est un peu particulier : il faut que votre programme fonctionne
pour plusieurs buggles, chacune étant dans une situation initiale
différente. Le même code sera utilisé pour chacune d'entre elles.</p>

<p>Quand votre programme fonctionne, passez à l'exercice suivant (qui est caché
par défaut dans un sous-arbre de la fenêtre de sélection).</p>
</body></html>