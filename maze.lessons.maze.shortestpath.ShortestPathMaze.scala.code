override def run() {
  val a:Int = ilEstOuLeBiscuit1()
  whoNeedsAMap(a,ilEstOuLeBiscuit2(a))
  timeToBreakOut()
  prendBiscuit()
}


def timeToBreakOut():Int = {
  val x:Int = getX()
  val y:Int = getY()
  val b:Int = getIndication(x,y)
  if (x < getMondeLargeur() - 1 && getIndication(x+1,y) == b - 1) {
    if (!aMurOuest(x+1,y)) {
   	  setDirection(Direction.EST)
    	avance()
   	  timeToBreakOut()
      return 0 // c est repugnant mais il fallait rendre sur que un timeToBreakOut ne continue pas apres avoir lance un autre timeToBreakOut sinon il peut effectuer un mouvement de trop puisque la position finale sera à portée d'une position à 1 de distance d'une ancienne position et ca fait pas des chokapics (je crois que ca marche comme ca mais cpas important anyway) //
    }
  }
  if (x > 0 && getIndication(x-1,y) == b - 1) {
    if (!aMurOuest(x,y)) {
    	setDirection(Direction.OUEST)
    	avance()
    	timeToBreakOut()
      return 0
    }
  }
  if (y > 0 && getIndication(x,y-1) == b - 1) {
    if (!aMurNord(x,y)) {
    	setDirection(Direction.NORD)
    	avance()
    	timeToBreakOut()
      return 0
    }
  }
  if (y < getMondeHauteur() - 1 && getIndication(x,y+1) == b - 1) {
    if (!aMurNord(x,y+1)) {
    	setDirection(Direction.SUD)
    	avance()
    	timeToBreakOut()
      return 0
    }
  }
  return 0
}


def whoNeedsAMap(x:Int ,y:Int) { // marque le monde (accessible) //
  val c:Int = getIndication(x,y)
  if (x < getMondeLargeur() - 1 && getIndication(x+1,y) > c + 1) {
    if (!aMurOuest(x+1,y)) {
      setIndication(x+1,y,c + 1)
      whoNeedsAMap(x+1,y)
    }
  }
  if (x > 0 && getIndication(x-1, y) > c + 1) {
    if (!aMurOuest(x,y)) {
      setIndication(x-1,y,c + 1)
      whoNeedsAMap(x-1,y)
    }
  }
  if (y > 0 && getIndication(x,y-1) > c + 1) {
    if (!aMurNord(x,y)) {
      setIndication(x,y-1,c + 1)
      whoNeedsAMap(x,y-1)
    }
  }
  if (y < getMondeHauteur() - 1 && getIndication(x,y+1) > c + 1) {
    if (!aMurNord(x,y+1)) {
      setIndication(x,y+1,c + 1)
      whoNeedsAMap(x,y+1)
    }
  }
}


def ilEstOuLeBiscuit1():Int = { // trouve l'arriv?e et la marque //
  for (i <- 0 to getMondeLargeur() - 1) {
    for (j <- 0 to getMondeHauteur() - 1) {
      if (hasBaggle(i,j)) {
        setIndication(i,j,0)
        return i
      }
    }
  }
  return 9999
}

def ilEstOuLeBiscuit2(i:Int):Int = {
  for (j <- 0 to getMondeHauteur() - 1) {
    if (hasBaggle(i,j)) {
      return j
    }
  }
  return 9999
}