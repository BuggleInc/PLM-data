<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
  </style>
</head><body>
<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h2>Instructions</h2>

Félicitations ! Vous venez d'écrire votre premier programme ! Vous avez
compris l'idée maintenant : programmer, c'est simplement donner des
instructions à l'ordinateur, qui les applique aveuglément. La plus grande
difficulté est d'expliquer quoi faire à quelque chose d'aussi bête que
l'ordinateur...  
  
  <p>Le programme le plus simple est formé d'une suite d'ordres simples donnés à
la machine. C'est assez comparable à une recette de cuisine où l'on dit
<i>cassez les œufs puis ajoutez du sel puis mélangez le tout puis faites
cuire</i>. Dans les programmes, de tels instructions  sont appelées
fonctions ou méthodes, et vous devez les doter de parenthèses:</p>  
		<pre>nomDeLaMethode()</pre>
		
   <p>Scala veut que les instructions soient séparées soit
par des points-virgules (;), soit par des retours à la
ligne.
L'exemple ci-dessus de recette s'écrirait donc à peu près comme ci-dessous.
 (Vous pouvez aussi ajouter des points-virgules en fin de
lignes, mais ce n'est pas indispensable).</p>
    
<pre>
casserLesOeufs()
ajouterDuSel()
melangerLeTout()
faireCuire()
</pre>
    

   <p>Il serait également possible de l'écrire sous la forme suivante, mais placer
plusieurs instructions sur la même ligne est généralement considéré comme
une très mauvaise habitude car cela complique grandement la relecture du
code après coup.</p>
<pre>
casserLesOeufs(); ajouterDuSel(); melangerLeTout(); faireCuire();
</pre>


  <p>Bien entendu, ces méthodes n'existent pas en Scala, mais il serait
possible de les définir par vous même (nous verrons plus tard comment
définir vos propres méthodes).</p>
  
  <p>Pour l'instant, nous allons utiliser les instructions de la buggle. Il
y a une méthode pour chaque bouton du contrôle interactif.  Pour faire la
même
chose que le bouton <b>avance</b> (faire avancer la buggle d'un pas), il
faut
écrire dans l'éditeur : </p>
  <pre>avance()</pre>
  <p>De même, pour faire l'équivalent des boutons
<b>recule</b>, <b>gauche</b> et
<b>droite</b>, il faut utiliser respectivement :</p>
<pre>
recule()
gauche()
droite()
</pre>

	 <p>Le bouton <b>marquer</b> est un peu particulier, puisqu'il correspond à deux
méthodes : la première lève le crayon, tandis que la seconde le baisse.</p>
<pre>
leveBrosse()
baisseBrosse()
</pre>
  <p>La buggle offre d'autres méthodes, présentées dans le menu "Aide/À propos de
ce monde". Elles seront introduites au fur et à mesure des besoins.</p>


  <h3>Objectif de cet exercice</h3><a name="Objectives"/> Notre second programme sera un peu plus compliqué,
mais pas tellement. L'objectif de votre buggle est simplement de se dessiner
une maison (une boîte), et de se cacher dedans. Vérifiez le monde objectif
pour voir exactement ce que cela veut dire. 

<p>Quand vous changerez d'exercice, n'oubliez pas l'exercice d'application qui
suit. Par défaut, il n'est pas visible dans la fenêtre de sélection, et il
faut ouvrir le sous-arbre pour le voir. Lorsque vous ouvrez la fenêtre de
sélection des exercices, la plupart d'entre eux sont cachés, comme cela:</p>
<img src="sub-exercise-folded.png"/> 

<p>Vous devez cliquer sur le petit symbole à gauche de la buggle pour déplier
l'arbre, comme cela :</p>
<img src="sub-exercise-unfolded.png"/> 
</body></html>