def concat(l1:List[Int], l2:List[Int]): List[Int] = {
  def aux (l1:List[Int], l2:List[Int], r:List[Int]) :List[Int] = {
    l1 match {
      case Nil => r
      case h::q => aux(q, l2, h::r)
    }
  }
  def reverse(l:List[Int]): List[Int] = {
  	def aux(l:List[Int], r:List[Int]): List[Int] = {
    	l match {
      	case Nil => r
     	 case h::q => aux(q, h::r)
    	}
  	}
 	 aux(l,Nil)
	}
  aux(reverse(l1),l2,Nil)
}