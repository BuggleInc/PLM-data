override def run() {
  var nordTrouve=false
  while(!estSurBiscuit()){
    var virages=0
    while (nordTrouve==false){
      while(nordTrouve==false && virages>0){
        virages=choix2(virages)
        goNord()
        if (getY()==0){
          nordTrouve=true
          droite()
        }
      }
      while (nordTrouve==false && virages<4){
        virages=choix1(virages)
        goNord()     
        if (getY()==0){
          nordTrouve=true
          droite()
        }
      }
    }
    virages=choix1(virages)
  }
  prendBiscuit()
}




def keepHandOnSideWall():Boolean={
  gauche()
  if (estFaceMur()){
    droite()
    return true
  }
  else{
    droite()
    return false
  }
}

def goNord(){
  setDirection(Direction.NORTH)
  while(!estFaceMur()){
    avance()
  }
}

def choix1(virageIn:Int):Int={
  var virages = virageIn
  if (estFaceMur() && keepHandOnSideWall()){
    droite()
    avance()
    virages=virages-1
  }    
  else if (!estFaceMur() && keepHandOnSideWall()){
    avance()
  }
  else if (estFaceMur() && !keepHandOnSideWall()){
    gauche()
    avance()
    virages=virages+1
  }
  else if (!estFaceMur && !keepHandOnSideWall()){
    gauche()
    avance()
    virages=virages+1
  }
  return virages
}

def choix2(virageIn:Int): Int={
  var virages = virageIn
  if (estFaceMur() && keepHandOnSideWall()){
    droite()
    avance()
    virages=virages-1
  }    
  else if (!estFaceMur() && keepHandOnSideWall()){
    avance()
  }
  else if (estFaceMur() && !keepHandOnSideWall()){
    droite()
    avance()
    virages=virages-1
  }
  else if (!estFaceMur && !keepHandOnSideWall()){
    droite()
    avance()
    virages=virages-1
  }
  return virages
}
