Erreur de compilation :
AlgShellSort:9: error: not found: value n
    v = getValeur(n)
                  ^AlgShellSort:10: error: type mismatch;
 found   : i.type (with underlying type Int)
 required: ?{def -(x$1: ? >: Double): ?}
Note that implicit conversions are not applicable because they are ambiguous:
 both method int2long in object Int of type (x: Int)Long
 and method int2float in object Int of type (x: Int)Float
 are possible conversion functions from i.type to ?{def -(x$1: ? >: Double): ?}
    while(i-ecart >0 && !plusPetitQue(i-k*ecart,v)  ){
                                      ^AlgShellSort:10: error: overloaded method value - with alternatives:
  (x: Int)Int <and>
  (x: Char)Int <and>
  (x: Short)Int <and>
  (x: Byte)Int
 cannot be applied to (Double)
    while(i-ecart >0 && !plusPetitQue(i-k*ecart,v)  ){
                                       ^AlgShellSort:11: error: type mismatch;
 found   : i.type (with underlying type Int)
 required: ?{def -(x$1: ? >: Double): ?}
Note that implicit conversions are not applicable because they are ambiguous:
 both method int2long in object Int of type (x: Int)Long
 and method int2float in object Int of type (x: Int)Float
 are possible conversion functions from i.type to ?{def -(x$1: ? >: Double): ?}
      copie(i-k*ecart,i-(k-1)*ecart)
            ^AlgShellSort:11: error: type mismatch;
 found   : i.type (with underlying type Int)
 required: ?{def -(x$1: ? >: Double): ?}
Note that implicit conversions are not applicable because they are ambiguous:
 both method int2long in object Int of type (x: Int)Long
 and method int2float in object Int of type (x: Int)Float
 are possible conversion functions from i.type to ?{def -(x$1: ? >: Double): ?}
      copie(i-k*ecart,i-(k-1)*ecart)
                      ^AlgShellSort:11: error: overloaded method value - with alternatives:
  (x: Int)Int <and>
  (x: Char)Int <and>
  (x: Short)Int <and>
  (x: Byte)Int
 cannot be applied to (Double)
      copie(i-k*ecart,i-(k-1)*ecart)
             ^AlgShellSort:11: error: overloaded method value - with alternatives:
  (x: Int)Int <and>
  (x: Char)Int <and>
  (x: Short)Int <and>
  (x: Byte)Int
 cannot be applied to (Double)
      copie(i-k*ecart,i-(k-1)*ecart)
                       ^