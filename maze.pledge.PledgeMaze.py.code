def surMurG() :
  
  '''
  Verifie que mur a gauche
  '''
  ok = False
  left()
  if estFaceMur():
    ok = True  
  right()
  return ok
  
    
def cherche() :
  '''
  Positionne en face d'un couloir
  '''
  while estFaceMur() :
    left()

    
def keepHandOnSideWall() :
  '''
  Avance d'une case en gardant patte sur mur de gauche
  compte les virages effectu?es avec G = 1 et D = -1
  '''
  if surMurG() :
    if not estFaceMur() :
      avance()
  	else :
      right()
      sommeAngle -= 1
      
  else :
    while not surMurG() :
      left()
      sommeAngle += 1
    	avance()
    
    
def cherche_mur() :
  '''
  Positionne le robot avec un mur ? suivre ? sa gauche
  '''

  while not estFaceMur() :
  	avance()
	if estFaceMur() :
  	right()
    

def isDirectionFree(dir) :
  '''
  Retourne True si la direction est libre
  '''
  dir_courante=getDirection()
  setDirection(dir)
  if not estFaceMur() :
    return True
  setDirection(dir_courante)
  return False
  

'''
Va vers le Nord (choix arbitraire)
Quand obstacle: patte G reste sur le mur et 
								on compte les virages G = +1 et D = -1
Quand somme des virages = 0, on se tourne vers le Nord
et on recommence
'''

global sommeAngle = 0

    
while not estSurBiscuit() :
  
  if isDirectionFree(Direction.NORTH) and sommeAngle == 0 :
    avance()
  else :
    keepHandOnSideWall()
    
  

if estSurBiscuit() :
  prendBiscuit()