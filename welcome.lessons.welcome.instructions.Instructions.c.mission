<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
  </style>
</head><body><!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h2>Instructions</h2>

Congratulations! You just wrote your first program! You got the idea now: 
programming is nothing more than giving simple instructions to the computer that 
blindly apply them. The main difficulty is to explain stuff to something as stupid 
as a computer...  
  
  <p>Programs are mainly suites of method calls, which are no more than a list of
   simple orders given to the machine. It is very similar to a recipe stating
   <i>Melt the chocolate pieces, add sugar, cool the mix and serve</i>. 
   In your programs, such built instructions are called functions or methods, and you 
   should add parenthesis to invoke them:</p>  
		<pre>nameOfTheMethod()</pre>
		
   <p>C wants to have the instructions separated by semi-columns 
    (;).
    The previous example would thus be written in the following 
    way.</p>
    
<pre>
meltTheChocolatePieces();
addSugar();
coolMix();
serve();
</pre>
    


  <p>Of course, these specific methods do not exist by default in C,
  but it may be possible to define them by yourself (we'll see later how to 
  define your how methods).</p>
  
  <p>For now, 
  we'll simply go for the buggle instructions. There is a method for each button of the 
  interactive control panel. To achieve the same effect than the <b>forward</b> button 
  (making the buggle moving one step forward), you need to write the following in the
  editor: </p>
  <pre>stepForward();</pre>
  <p>Likewise, to achieve the same effect than the <b>stepBackward</b>, <b>left</b>
  and <b>right</b> buttons, you need to use respectively:</p>
<pre>
backward();
left();
right();
</pre>

	 <p>The <b>mark</b> button is a bit particular, since it correspond to two
methods: the first one moves the pen up while the second moves it down.</p>
<pre>
brushUp();
brushDown();
</pre>
  <p>The buggle offers other methods, that are presented from the "Help/about
   this world" menu and will be introduced on need.</p>


  <h3>Exercise goal</h3><a name="Objectives"/>
  Our second program will be a bit more complicated, but not much. The goal for 
  your buggle is simply to draw a house (a box), and hide inside. Check the 
  objective world to see exactly what this means. 

  <p>Use your brush to mark the ground as you walk. Start marking the ground with 
  <code>brushDown()</code>, and stop it with <code>brushUp()</code> afterward 
  (e.g., to enter your house without marking its ground). The full list of all 
  instructions understood by your buggle can be found in "Help/About this world".</p>

<h3>After this exercise</h3>
<p>When switching to the next exercise, please note that there is a sub-exercise following this one. 
By default, it is hidden in the menu and you have to open the sub-menu to see it. 
When you switch the exercise, most of the exercises are hidden because the tree is folded, as follows:</p>
<img src="sub-exercise-folded.png"/> 

<p>You have to click on the little symbol to the left of the buggle to unfold the tree, as follows:</p>
<img src="sub-exercise-unfolded.png"/> 
</body></html>