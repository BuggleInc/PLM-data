/* Do not change these definitions */
val STOP   = 0;
val NOTURN = 1;
val LEFT   = 2;
val BACK   = 4;
val RIGHT  = 8;

val NEXT_COLOR = 0;
val NEXT_MOVE  = 1;
val NEXT_STATE = 2;


var rule:Array[Array[Array[Int]]] = null // Change this
var nbSteps:Int = 0; // Change this

/** init the rule array from a string defining a Langton's ant 
 * 
 *  You can use this method inside your init() method if you want 
 *  to test langton's ant instead of full turmites.
 */
def initLangton(name:String) {
    val nbColors = name.length(); /* As many colors as letters in the ant's name */

    rule = new Array[Array[Array[Int]]] (1); /* one state only */
    rule(0) = new Array[Array[Int]] (nbColors); /* As many colors as letters in the ant's name */
    for (i <- 0 to nbColors-1) {
        rule(0)(i) = new Array[Int] (3); /* every command set has 3 elements */ 

        rule(0)(i)(NEXT_COLOR) = (i+1) % nbColors;

        if (name.charAt(i) == 'L') {
            rule(0)(i)(NEXT_MOVE) = LEFT;            
        } else if (name.charAt(i) == 'R') {
            rule(0)(i)(NEXT_MOVE) = RIGHT;
        } else {
            getGame().getLogger().log("Unknown command in your ant's name: "+name.charAt(i));
        }

        rule(0)(i)(NEXT_STATE) = 0; /* only one state */

        // println("{"+rule(0)(i)(NEXT_COLOR)+","+rule(0)(i)(NEXT_MOVE)+","+rule(0)(i)(NEXT_STATE)+"}");
    }
}
def init() {
  nbSteps = 8342
  rule = Array( Array( Array(1,'R',0),Array(1,'R',1)),Array(Array(0,'N',0),Array(0,'N',1)))
    /* Your code comes here. */

    /* Something like 
     *   nbSteps = 42;
     *   rule = Array( Array( Array(0,NOTURN,0), Array(0, NOTURN, 0) ) ); 
     * but with possibly more states (ie, bigger second dimension), and more color (ie bigger third -- internal -- dimension) 
     * and naturally, less boring than this turmite doing absolutely nothing (runs forward endlessly).
     */

    /* It can also be something like
     *   nbSteps = 42;
     *   initLangton("RL");
     */

    /* remember to send your best creations for inclusion in the gallery */
}
init()
def coupstylo(c:Color) {setCouleurBrosse(c);baisseBrosse();leveBrosse()}
def indexOfValue(nums:Array[Color] ,lookingFor:Color): Int = {var a = -1;for (i <- 0 to nums.length-1) {if (nums(i)==lookingFor && a==(-1)) a=i};return a}

var state = 0;

def step(colors:Array[Color], rule:Array[Array[Array[Int]]] ) {
    /* Your code comes here */
  var c = getCouleurSol()
  var i = indexOfValue(colors,c)
  val e = rule(state)(i)
  var co:Color = null
  coupstylo(colors(e(0)))
  e(1) match {
    case 0 => co = colors(e(0));state = e(2);
    case 1 => co = colors(e(0));state = e(2);;avance()
    case 2 => co = colors(e(0));state = e(2);gauche();avance()
    case 4 => co = colors(e(0));state = e(2);droite();droite();avance()
    case 8 => co = colors(e(0));state = e(2);droite();avance()
  }
}