override def run() {
  var xMax:Int = getWorldWidth();
  var yMax:Int = getWorldHeight();

	var x:Int = findBaggle(xMax,yMax)._1;
	var y:Int = findBaggle(xMax,yMax)._2;  
  
  numerote(x,y,xMax,yMax)
}


def findBaggle(xMax:Int, yMax:Int): (Int,Int) = {
  var i:Int =0;
  var j:Int =0;
  while (!hasBaggle(i,j)){
    if (i==xMax-1) {
      i = 0;
      j += 1
    }
    else {
      i += 1
    }
  }
  return (i,j)
  
}

def listVoisins(listCoord:List(Int,Int), xMax:Int, yMax:Int, num:Int):List(Int,Int) = {
  
  var voisins = Nil;
  var x:Int = 0;
  var y:Int = 0;
  
  while (!listCoord.isEmpty) {
		x = listCoord.head._1
    y = listCoord.head._2
    listCoord = listCoord.tail
    
    if (y!= yMax-1 && !hasTopWall(x,y) && getIndication(x,y-1)>num) { 
      voisins = (x,y-1)::voisins
    }
    if (x!= 0 && !hasLeftWall(x,y) && getIndication(x-1,y)>num) {
      voisins = (x-1,y)::voisins
    }

    if (x!= xMax-1 && !hasLeftWall(x+1,y) && getIndication(x+1,y)>num) {
      voisins = (x+1,y)::voisins
    }

    if (y!= 0 && !hasTopWall(x,y+1) && getIndication(x,y+1)>num) {
      voisins = (x,y+1)::voisins
    }
    
  }  
  return voisins
  
  
}
def numerote(x:Int,y:Int, xMax:Int, yMax:Int) {
  val num = 0;
  val listV = listVoisins(((x,y)::Nil),xMax,yMax,0);
  val listVS:List(Int,Int) = Nil
  
  while (true) {
    
    listVS = listVoisins(listV,xMax,yMax,num);
    
    while (!listV.isEmpty) {
      
      x = listV.head._1
      y = listV.head._2
      listV = listV.tail

      setIndication(x,y,num)
    }
    num = num+1;
  	listV = listVS;
  }
  
}  