<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
  </style>
</head><body><!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h1>CombSort</h1>
 
<p>We saw that CocktailSort improve a bit for turtles (i.e. small values near to
the end of the array), but it is still possible to achieve better. ComboSort
comes down to providing them a short cut: instead of comparing adjacent
values, we compare values separated by a gap bigger than 1. That way,
turtles we traverse <i>gap</i> cells at each traversal. Naturally, we have
to apply the algorithm with decreasing gaps, and finish with <i>gap=1</i> to
ensure that the array is correctly sorted afterward. Choosing the right gap
and how to decrease it is a difficult question, but in practice, dividing it
by 1.3 after each traversal leads to good performance. Here is the
corresponding pseudo-code:</p>
 
 <pre>
gap = len;
do
   if gap>1 then
     gap = gap / 1.3
   i = O
   while i+gap &lt; len do:
     if i and i+gap must be swapped, do it
     increase i by one
while the gap is bigger than 1 or the last traversal swapped at least one pair
</pre>



<p>This algorithm was invented by Wlodek Dobosiewicz in 1980, and later
rediscovered and popularized by Stephen Lacey and Richard Box, who described
it in Byte Magazine in April 1991.</p>
</body></html>