override def run() {
  // variables
  var hauteur : Int = getMondeHauteur()
  var largeur : Int = getMondeLargeur()
  
  //-------------------------------------------
  
  def trouverSortie():(Int,Int) = {
  	var x : Int = 0
    var y : Int = 0
    while (!aBiscuit(x,y)) { // tant qu'on a pas trouve, parcours en largeur
      if (x < largeur-1) {x+=1}
      else {y+=1 ; x=0}
    }
    setIndication(x,y,0) 
    return (x,y) // marque sortie + retourne la position de la sortie
  }
  
  //-------------------------------------------
  
  def marquerCasesAdjacentes(x:Int,y:Int) {
    var i : Int = getIndication(x,y)
    // on considere la case (x,y) numerotee i
    // recursif : condition d'arret = plus de cases dispo
    // booleen pour savoir quel appel recursif faire
    // probleme d'ordre de priorite dans la recursivitee
 		var booldessus : Boolean = false ;
    var booldroite : Boolean = false ;
    var booldessous : Boolean = false ;
    var boolgauche : Boolean = false ;
    //case au dessus
    if (y >0
        && !aMurNord(x,y)
        && getIndication(x,y-1)==9999)
    			{setIndication(x,y-1,i+1) ; booldessus = true}
    //case a droite
    if (x < largeur-1
        && !aMurOuest(x,y)
        && getIndication(x+1,y)==9999)
      		{setIndication(x+1,y,i+1); booldroite = true}
    //case en dessous
    if (y < hauteur-1
        && !aMurNord(x,y+1)
        && getIndication(x,y+1)==9999)
    			{setIndication(x,y+1,i+1); booldessous = true}
     //case a gauche
    if (x > 0
        && !aMurOuest(x-1,y)
        && getIndication(x-1,y)==9999)
    			{setIndication(x-1,y,i+1); boolgauche = true}
    
    if (booldessus) {marquerCasesAdjacentes((x,y-1))}
    if (booldroite) {marquerCasesAdjacentes((x+1,y))}
    if (booldessous) {marquerCasesAdjacentes((x,y+1))}
    if (boolgauche) {marquerCasesAdjacentes((x-1,y))}
    
  }
  
  //-------------------------------------------
  
  def directionPlusCourte() {
    var posx : Int = getX()
    var posy : Int = getY()
    var ind : Int = getIndication(posx,posy)
    //case au dessus
    if (posy > 0
        && !aMurNord(posx,posy)
        && getIndication(posx,posy-1)<ind)
    			{setDirection(Direction.NORD)}
    //case a droite
    if (posx < largeur-1 
        && !aMurOuest(posx,posy)
        && getIndication(posx+1,posy)<ind)
    			{setDirection(Direction.EST)}
    //case au dessous
    if (posy < hauteur-1
        && !aMurNord(posx,posy+1) 
        && getIndication(posx,posy+1)<ind)
    			{setDirection(Direction.SUD)}
    //case a gauche
    if (posx > 0
        && !aMurOuest(posx-1,posy)
        && getIndication(posx-1,posy)<ind)
    			{setDirection(Direction.OUEST)}
    }
  
  //-------------------------------------------
  
  var (x,y) : (Int,Int) = trouverSortie()
  marquerCasesAdjacentes((x,y))
  while (!estSurBiscuit) {
    directionPlusCourte(); avance()}
	prendBiscuit()
  }