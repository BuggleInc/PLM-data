def trouveLaSortie(): Array[Int] = {
  var xMax:Int = getMondeLargeur() - 1
	var yMax:Int = getMondeHauteur() - 1
  
  for (x <- 0 to xMax) {
    for (y <- 0 to yMax) {
      if (aBiscuit(x, y))
      	return Array[Int](x, y)
    }
  }
  
  return Array[Int](2)
}

def casesAdjacentes(pos: Array[Int]): Array[Array[Int]] = {
  var xMax:Int = getMondeLargeur() - 1
	var yMax:Int = getMondeHauteur() - 1
  
  var result:Array[Array[Int]] = Array[Array[Int]]()
  
  if (pos(0) > 0) {
    result :+ Array[Int](pos(0) - 1, pos(1))
  }
  
  if (pos(0) < xMax) {
    result :+ Array[Int](pos(0) + 1, pos(1))
  }
  
  if (pos(0) > 0) {
    result :+ Array[Int](pos(0), pos(1) - 1)
  }
  
  if (pos(1) < yMax) {
    result :+ Array[Int](pos(0), pos(1) + 1)
  }
  
  return result
}

def ecritIndications() {
  // Tout d'abord, il faut trouver la sortie ! :p
  var posSortie:Array[Int] = trouveLaSortie()
  
  setIndication(posSortie(0), posSortie(1), 0)
  
  // Maintenant on écrit les indications sur les cases adjacentes.
  var casesMarquees:Int = 1
  
  while (casesMarquees != getMondeHauteur() * getMondeLargeur()) {
    
  }
}

override def run() {
  var xMax:Int = getMondeLargeur() - 1
	var yMax:Int = getMondeHauteur() - 1
  
  // On commence par écrire les indications sur les cases.
  ecritIndications()
}