var state = 0;
val STOPP:Int = 0;
val DEVANT:Int = 1;
val GAUCHE:Int = 2;
val DEMI_TOUR:Int = 3;
val DROITE:Int = 4;
val MVT_SUIVANT:Int = 1;
val COULEUR_SUIVANTE:Int = 0;
val ETAT_SUIVANT:Int = 2;

    def step(colors:Array[Color], rule:Array[Array[Array[Int]]] ) {

	var couleur:Int = couleurTab(colors, getCouleurSol());

	setCouleurSol(colors(rule(state)(couleur)(COULEUR_SUIVANTE)));
	
	(rule(state)(couleur)(MVT_SUIVANT)) match
	{
		case STOPP => ();
		case DEVANT => avance();
		case GAUCHE => gauche(); avance();
		case DEMI_TOUR => retourne(); avance();
		case DROITE => droite(); avance();
	}
        state = rule(state)(couleur)(ETAT_SUIVANT);
    }

def setCouleurSol(c:Color)
{
	setCouleurBrosse(c);
	baisseBrosse();
	leveBrosse();
}

def couleurTab(tab:Array[Color], c:Color):Int = 
{
	var i:Int = 0;
	
	while (c != tab(i))
		i = i + 1;

	return i;
}


