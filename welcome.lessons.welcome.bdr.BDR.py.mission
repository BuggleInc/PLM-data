<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
.Java   {visibility: visible; color:#FF0000}
.java   {visibility: visible; color:#FF0000}
.python {visibility: visible; color:#008000}
.Python {visibility: visible; color:#008000}
.scala  {visibility: visible; color:#0000FF}
.Scala  {visibility: visible; color:#0000FF}
  </style>
</head><body>
<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h2>Buggle Dance Revolution (BDR)</h2>

<p>Après toutes ces courses, il est temps de faire la fête ! Pour cela, nous
allons apprendre à nos buggles à jouer à Dance Revolution, ce jeu très prisé
de certains étudiants où le joueur doit bouger sur un tapis prévu à cet
effet en fonction des consignes présentées à l'écran en rythme avec la
musique. Mais avant cela, nous avons quelques détails à étudier.</p>

<font color="EEEEEE">
<h3>Conditionnelles sans accolades</h3>
<p>
Il y a un détail que nous avons omis à propos de la syntaxe des
conditionnelles : si une branche ne contient qu'une seule instruction, les
accolades sont optionnelles. Ainsi, les deux extraits suivants sont
équivalents:</p>

 <pre>if (<b>condition</b>) {
    <b>quoiFaireSiLaConditionEstVraie();</b>
} else {
    <b>quoiFaireSinon();</b>
}</pre>
 <pre>if (<b>condition</b>)
    <b>quoiFaireSiLaConditionEstVraie();</b>
else
    <b>quoiFaireSinon();</b></pre>

<p>Vous pouvez faire de même avec les boucles dont le corps se réduit à une
seule instruction. Mais attention, ceci peut être dangereux si on enchaîne
les <tt>if</tt> comme dans l'exemple suivant. </p>
<pre>if (estSurBiscuit())    
     if (x == 5)
          gauche();
else
     droite();
<font color="00FF00">avancePas();</font><font color="FF00FF">avance();</font></pre>

<p>En fait, ça ne tourne pas à droite quand il n'y a pas un baggle par terre ET
que x vaut 5, mais quand la buggle a trouvé un baggle, et que x vaut une
autre valeur. Autrement dit, la buggle lit le code précédent comme suit
(notez que le <tt>else</tt> est décalé vers la droite par rapport à
précédemment) :</p>
<pre>if (estSurBiscuit())    
        if (x == 5)
            gauche();
        else
            droite();
<font color="00FF00">avancePas();</font><font color="FF00FF">avance();</font></pre>

<p>La première leçon, c'est que l'indentation est très importante pour que les
humains puissent comprendre le code, mais elle ne change pas la
signification du code pour la machine. On aurait tout aussi bien pu écrire
le code suivant et obtenir le même résultat. Mais attention, si on veut
qu'un humain puisse relire le code, l'indentation est quasi
indispensable. C'est par exemple le cas si votre code doit être relu par un
professeur (pour qu'il le note ou pour lui poser une question), ou si vous
comptez réutiliser votre code plus tard, ou même si vous devez debugger
votre propre code après l'avoir écrit.</p> 

<pre>if (estSurBiscuit()) if (x == 5) gauche(); else droite(); <font color="00FF00">avancePas();</font><font color="FF00FF">avance();</font></pre>

<p>La seconde leçon, c'est qu'une branche <tt>else</tt> se raccroche toujours
au <tt>if</tt> le plus proche. C'est parfois un peu contre-intuitif, et il
est préférable d'ajouter plus d'accolades que nécessaire pour lever toute
ambiguïté.</p>
</font>

<h3>Enchaînements de conditionnelles</h3>

<p>Il arrive que l'on veuille demander à la buggle quelque chose similaire à :</p> 
<pre>s'il pleut, prend un parapluie; 
si non, s'il fait chaud, prend une bouteille d'eau; 
si non, si nous sommes le 14 juillet, prend un drapeau français</pre>

<p>Le piège étant que nous voudrions qu'au plus l'une de ces actions soient
réalisées. C'est à dire, que s'il pleut un 14 juillet très chaud, on ne veut
pas que la buggle sorte avec un parapluie, de l'eau et un drapeau, mais
juste avec un parapluie. Le code suivant est donc faux.</p>

<pre><font color="EEEEEE">if (ilPleut())
    prendreParapluie();
if (ilFaitChaud())
    prendreDeLEau();
if (sommes14Juillet())
    prendreDrapeau();</font><font color="008000">if ilPleut():
    prendreParapluie()
if ilFaitChaud():
    prendreDeLEau()
if sommes14Juillet():
    prendreDrapeau()</font></pre>


<p>En effet, toutes les conditions sont évaluées les unes après les autres, et
on risque donc d'aller au défilé un jour de pluie. À la place, il faut donc
écrire quelque chose comme ce qui suit pour s'assurer que si l'on trouve une
condition vraie, on n'évalue pas les suivants.</p>

<pre><font color="EEEEEE">if (ilPleut()) {
    prendreParapluie();
} else {
    if (ilFaitChaud()) {
        prendreDeLEau();
    } else {
        if (sommes14Juillet()) {
            prendreDrapeau();
        }
    }
}</font><font color="008000">if ilPleut():
    prendreParapluie()
else:
    if ilFaitChaud():
        prendreDeLEau()
    else:
        if sommes14Juillet():
            prendreDrapeau()</font></pre>


<p>Une telle cascade de conditionnelles est un peu difficile à lire, et il est
préférable
<font color="EEEEEE"> d'omettre les accolades associées aux <tt>else</tt> comme
suit. Il y a même certains langages qui introduisent un mot-clé spécial pour
ces <tt>else if</tt> (mais pas <font color="FF0000">Java</font><font color="008000">python</font><font color="0000FF">Scala</font><font color="00FF00">C</font>).</font>
<font color="008000"> d'introduire les sous-blocs avec le mot-clé <code>elif</code>
(abréviation de «else if») pour expliciter ces branches «sinon si».</font>
</p>

<pre><font color="EEEEEE">if (ilPleut()) { 
    prendreParapluie();
} else if (ilFaitChaud()) {
    prendreDeLEau();
} else if (sommes14Juillet()) {
    prendreDrapeau();
}</font><font color="008000">if ilPleut():
    prendreDrapeau()
elif ilFaitChaud():
    prendreDeLEau()
elif sommes14Juillet():
    prendreDrapeau()</font></pre>

<h3>Les graffitis dans le monde des buggles</h3>

<p>Les buggles peuvent écrire des choses par terre dans leur monde. Pour ce
faire, elles utilisent les quatre méthodes suivantes:</p>

<ul>
  <li><code><font color="00FF00">int</font><font color="FF0000">boolean</font>
estSurMessage()<font color="0000FF">:Boolean</font></code>: renvoie
<code><font color="00FF00">1</font><font color="FF00FF">true</font><font color="008000">True</font></code> si et seulement
s'il y a un message écrit par terre.</li>
  <li><code><font color="00FF00">char*</font><font color="FF0000">String </font>litMessage()<font color="0000FF">: String</font></code>
: renvoie le message qu'il y a écrit par terre (s'il y a rien, on obtient
une chaîne vide).</li>
  <li><code><font color="FFFF00">void</font> ecritMessage(<font color="00FF00">char*</font><font color="FF0000">String
</font>msg<font color="0000FF">: String</font>)</code> : écrit le message spécifié en argument
par terre. S'il y a déjà quelque chose écrit par terre, on ajoute le nouveau
message à la fin du précédent.</li>
  <li><code><font color="FFFF00">void </font>clearMessage()</code> : efface ce qui est écrit par
terre.</li>
</ul>


<h3>Objectif de cet exercice</h3>L'objectif est donc d'organiser une partie de BDR entre les buggles en leur
apprenant à bouger en fonction des indications écrites par terre.  Ces
indications sont des messages au sol, avec le code suivant:

<table border="1">
 <tr><td>Indication</td>
     <td>Quoi faire</td>
     <td>Mnémotechnique</td></tr>

 <tr><td><font color="FFFF00">'R'</font><font color="0080FF">"R"</font></td><td>Tourner à droite et avancer d'une case</td><td>Right (signifie «droite» en anglais)</td></tr>
 <tr><td><font color="FFFF00">'L'</font><font color="0080FF">"L"</font></td><td>Tourner à gauche et avancer d'une case</td><td>Left (signifie «gauche» en anglais)</td></tr>
 <tr><td><font color="FFFF00">'I'</font><font color="0080FF">"I"</font></td><td>Se retourner (demi-tour) et avancer d'une case</td><td>Inverse</td></tr>

 <tr><td><font color="FFFF00">'A'</font><font color="0080FF">"A"</font></td><td>Avancer d'une case</td><td>Première lettre de l'alphabet</td></tr>
 <tr><td><font color="FFFF00">'B'</font><font color="0080FF">"B"</font></td><td>Avancer de deux cases</td><td>Deuxième lettre de l'alphabet</td></tr>
 <tr><td><font color="FFFF00">'C'</font><font color="0080FF">"C"</font></td><td>Avancer de trois cases</td><td>Troisième lettre de l'alphabet</td></tr>

 <tr><td><font color="FFFF00">'Z'</font><font color="0080FF">"Z"</font></td><td>Reculer d'une case</td><td>A une lettre de la fin de l'alphabet</td></tr>
 <tr><td><font color="FFFF00">'Y'</font><font color="0080FF">"Y"</font></td><td>Reculer de deux cases</td><td>A deux lettres de la fin de l'alphabet</td></tr>
 <tr><td><font color="FFFF00">'X'</font><font color="0080FF">"X"</font></td><td>Reculer de trois cases</td><td>A trois lettres de la fin de l'alphabet</td></tr>
 <tr><td><i>(n'importe quoi d'autre)</i></td><td>Arrêter de danser.</td><td></td></tr>
</table>

<h3>Indications</h3>

Cet exercice peut sembler un peu compliqué, mais il s'agit principalement de
traduire le contenu du tableau ci-dessus dans un enchaînement de
conditionnelles.

<p>Vous devez continuer à danser tant qu'il reste des pas de danse à
faire. c-à-d tant qu'on est sur une case décrite dans le tableau. Le plus
simple pour cela est d'utiliser une variable booléenne (<code>fini</code>)
en condition d'arrêt d'une boucle while. Cette variable est initialisée à la
valeur faux
(<code><font color="00FF00">0</font><font color="FF00FF">false</font><font color="008000">False</font></code>). Si on
trouve une case ne répondant à aucune ligne du tableau, on change la valeur
de cette variable à vrai
(<code><font color="00FF00">1</font><font color="FF00FF">true</font><font color="008000">True</font></code>). Cela arrête
la boucle, et le programme. </p>

<font color="FFFF00">
<p>Une autre subtilité est qu'il est un peu pénible en Java de déterminer si
deux chaînes de caractères sont identiques. Nous utiliserons donc la méthode
<code>char getIndication<font color="00FF00">Bdr</font>()</code> à la place de
<code><font color="FF0000">String</font><font color="00FF00">char*</font> litMessage()</code>. Cette méthode, qui
n'est connue que des buggles des exercices BDR, renvoie le premier caractère
du message au sol (ou ' ' --une espace-- s'il n'y a rien d'écrit au
sol). Cela nous permet de travailler avec des caractères
(<code>char</code>), qui sont moins pénibles que les chaînes en <font color="FF0000">Java</font><font color="008000">python</font><font color="0000FF">Scala</font><font color="00FF00">C</font>.</p>
</font>

<h3>Trucs et astuces</h3>

Si vous ne parvenez plus à comprendre pourquoi votre buggle n'exécute pas
les pas de danse demandés, essayez d'ajouter <code>baisseBrosse()</code>
dans votre méthode. Cela demandera à la buggle de poser une brosse par
terre, laissant une trace au sol quand elle avance. Cela devrait vous aider
à suivre sa trajectoire, mais pensez à retirer cette appel lorsque vous
voulez tester si votre solution marche : on vous demande de faire danser les
buggles, pas de dégrader le dance floor.

<p>Quand votre programme fonctionne enfin, passez à l'exercice suivant.</p>
</body></html>