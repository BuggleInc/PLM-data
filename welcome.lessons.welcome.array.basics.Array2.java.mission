<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
.Java   {visibility: visible; color:#FF0000}
.java   {visibility: visible; color:#FF0000}
.python {visibility: visible; color:#008000}
.Python {visibility: visible; color:#008000}
.scala  {visibility: visible; color:#0000FF}
.Scala  {visibility: visible; color:#0000FF}
  </style>
</head><body><!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h1><font color="FF00FF">Arrays</font><font color="008000">Lists</font>, Knotting and Modulos</h1>

<p>This exercise is similar to the previous one: you have to reproduce the
color pattern of the first cell into the other ones.</p>

<p>The first difference is that the world is bordered of walls: you thus have
to slightly modify your trajectory to ensure that the buggle does not crash
into a wall. The simpler for that is to handle the first cell out of the
<code>for</code> loop and do only <code>getWorldHeight()-1</code> steps in
the loop.</p>

<p>The other difference is that the offset to apply between columns is not
fixed, but written on the first cell of each column. To get the info as an
integer, we can use:</p>

<pre><font color="FF0000">int offset = Integer.parseInt(readMessage())</font><font color="008000">offset = int( readMessage() )</font><font color="0000FF">val offset = readMessage().toInt</font></pre>

<p><code>readMessage()</code> gets the message on the ground as a <font color="FF00FF">String</font><font color="008000">string</font>, 
while <code><font color="FF0000">Integer.parseInt(str)</font><font color="0000FF">str.toInt</font><font color="008000">int(str)</font></code> 
transforms the string <code>str</code> into an integer by <i>reading</i> it.</p>

<p>Then, to pick the right color, the easier is to use the <code>%</code>
(modulo) operator. For example, <code>(i + 5) % size</code> allows to
retrieve the <code>i</code>th cell of an array of size <code>size</code>
with an offset of <code>5</code>.</p>

<p>You're up.</p>
</body></html>