def hanoi(height:Int, src:Int, other:Int, dst:Int) {
 
  height match {
    
    case 0 => { () }
    
    case n => {
      hanoi(n - 1, src, dst, other)
      move(src, dst)
      hanoi(n - 1, other, src, dst)
    }
  } 
}

def hanoi_fast(height:Int, src:Int, free:Int, full:Int, dst:Int) {
  
  if height <= 1 {
    hanoi(height, src, free, dst)
  }
  else {
    move(src, full)
    hanoi((height - 1), src, free, dst)
    move(full, dst)
  }
}

def splitHanoi(height:Int, src:Int, other:Int, dst1:Int, dst2:Int) {
  
  height match {
    
    case 0 => {()}
    
    case n => {
      splitHanoi((n - 1), src, dst1, dst2, other)
      move(src, dst1)
      hanoi_fast((n - 1), dst2, src, dst1)
      move(src, dst2)
      hanoi_fast((n - 1), other, src, dst2)
    }
  }
 }