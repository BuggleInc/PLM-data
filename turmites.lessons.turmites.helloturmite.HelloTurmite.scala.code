    var state = 0;
    val CLR_SUIVANT = 0
    val MVT_SUIVANT = 1
    val ETAT_SUIVANT = 2
    var i=0

    def step(colors:Array[Color], rule:Array[Array[Array[Int]]] ) {
    	

    		changeCouleur(colors,rule)
    		ecrit()
    		mouvement(colors,rule)
    		changeState(colors,rule)

    
    }

     def mouvement(colors:Array[Color], rule:Array[Array[Array[Int]]]){
    		(rule(state)(couleurActuelle(colors))(MVT_SUIVANT)) match{
			case 1 => avance
			case 2 => gauche;avance
			case 4 => gauche;gauche;avance
			case 8 => droite;avance
			case _ =>	
		}
    		
    	}
   	def couleurActuelle(colors:Array[Color]):Int={
   	i=0
   	while (getCouleurSol!=colors(i)){
		i=i+1
	}
	return i
   }
	def changeState(colors:Array[Color], rule:Array[Array[Array[Int]]]){
		if(rule(state)(couleurActuelle(colors))(ETAT_SUIVANT)==0){
			state = 0
		}
		else{
			state = 1
		}
		
	}
	def changeCouleur(colors:Array[Color], rule:Array[Array[Array[Int]]]){
		setCouleurBrosse(colors((rule(state)(couleurActuelle(colors))(CLR_SUIVANT))))
	}
	def ecrit(){
		baisseBrosse
		leveBrosse
	}
  
    	