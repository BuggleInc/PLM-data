

def golomb(num:Int): Int = {
	
var suite = new Array[Int](num + 1);
var sol = 0;
var lastModIndex = 0;
var lastValue = 0;
	suite(1) = 1; 
	suite(num) = 0;
	
		while(suite(num) == 0)
		{
			
			for(i <- lastModIndex to lastModIndex + suite(lastModIndex))
			{
			 	suite(i) = lastValue;
			
			
			}
				lastValue = lastValue + 1;
				lastModIndex = lastModIndex + suite(lastModIndex);
		}

	return suite(num);
}
def nbOccurs(table : Array[Int], n:Int):Int ={

	var count = 0;
	for(i <- 0 to table.length - 1){

		if(table(i)==n){
			count = count + 1;
		}
		
	}
	return count ;
}
















/*def golomb(num:Int): Int = {
	
var suite = new Array[Int](num + 1);
var sol = 0;
suite(1) = 1;
for(i <-2 to num ){

	if(suite(i-1) == nbOccurs(suite,i-1))
	{	//Si i-1 apparait a(i-1) fois
		suite(i) = suite(i-1) + 1;
	}
	else
	{
		suite(i) = suite(i-1);
	}	
}
sol = suite(num);
return sol;

}
def nbOccurs(table : Array[Int], n:Int):Int ={

	var count = 0;
	for(i <- 0 to table.length - 1){

		if(table(i)==n){
			count = count + 1;
		}
		
	}
	return count ;
}
*/
