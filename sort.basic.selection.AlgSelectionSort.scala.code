def selectionSort() {
  val len = getValueCount();
  var mem_i = 0;
  var min_indice = 0 ;
  /* More generally, for the cell N, it looks the cell M in [N;len] containing the smallest possible value of the interval. Then, it swaps the content of cell N with the one of cell M.*/ 
  for(i <- 1 to len-1){
    mem_i = getValue(i);
    min_indice = i;
    for(j <- i to len){
      if(isSmallerThan(j, mem_i)){
        min_indice = j;
      }
    }
  	swap(i,min_indice);
	}
}
def insertionSort(gap: Int) {
  val len = getValueCount();
  var j = 0 ;
  var mem = 0 ;
  /*For each i in [1,len-1]
  store the value of i in a variable v
  copy the cell i-1 into i if i-1  bigger than v
  copy the cell i-2 into i-1 if i-2 bigger than v
  copy the cell i-3 into i-2 if i-3 bigger than v
  copy the cell i-4 into i-3 if i-4 bigger than v
  ...
  copy v into the last cell copied above*/
  for(i <- 1 to len-1){
    mem = getValue(i);
    
    j=i-gap;
    while(j>=0 && getValue(j)>=mem){
      setValue(j+gap, getValue(j));
      j-=gap;
    }
    setValue(j+gap, mem);
  }
}