override def run() {
  distanceFin ()
}

def trouveBiscuitX():Int={
  val xmax=getMondeLargeur()
  val ymax=getMondeHauteur()
  for (i<-0 to xmax-1){
    for (j<-0 to ymax-1){
      if (aBiscuit(i,j)){return i}
    }
  }
  return 9999 //cas où il n'y a pas de biscuit
}

def trouveBiscuitY():Int={
  val xmax=getMondeLargeur()
  val ymax=getMondeHauteur()
  for (i<-0 to xmax-1){
    for (j<-0 to ymax-1){
      if (aBiscuit(i,j)){return j}
    }
  }
  return 9999 //cas où il n'y a pas de biscuit
}


def indiqueLeReste(x:Int,y:Int,cmpt:Int):Unit={
  val xmax=getMondeLargeur()
  val ymax=getMondeHauteur()
  setIndication(x,y,cmpt)
  if (trouveBiscuitX()!=9999){
      if (((x!=0)&&(!aMurOuest(x,y)))&&((getIndication(x-1,y)==9999)||getIndication(x-1,y)>cmpt)) {indiqueLeReste(x-1,y,cmpt+1)}
      if (((y!=0)&&(!aMurNord(x,y)))&&(getIndication(x,y-1)==9999||getIndication(x,y-1)>cmpt)) {indiqueLeReste(x,y-1,cmpt+1)}
    	if (((x!=xmax-1)&&(!aMurOuest(x+1,y)))&&(getIndication(x+1,y)==9999||getIndication(x+1,y)>cmpt))  {indiqueLeReste(x+1,y,cmpt+1)}
    	if (((y!=ymax-1)&&(!aMurNord(x,y+1)))&&(getIndication(x,y+1)==9999||getIndication(x,y+1)>cmpt))  {indiqueLeReste(x,y+1,cmpt+1)}	
    }}

def min (a:Int,b:Int):Int={
  if (a<b) {return a} else {return b}
}

def caseVoisineLaPlusProche(x:Int,y:Int):Direction={
  val xmax=getMondeLargeur()
  val ymax=getMondeHauteur()
  var haut=9999
  var gauche=9999
  var droite=9999
  var bas=9999
  if (y!=0) {haut=getIndication(x,y-1)}
  if (x!=0){gauche=getIndication (x-1,y)}
	if (x!=xmax-1) {droite=getIndication (x+1,y)}
	if (y!=ymax-1) {bas=getIndication (x,y+1)}
  var resultat=Direction.NORD
  //if (y!=0){  if (!aMurNord(x,y)){resultat=Direction.NORD}}
  if (min(haut,gauche)==gauche){if (!aMurOuest(x,y)){resultat=Direction.OUEST;haut=gauche}}
  if (min(haut,droite)==droite){if (!aMurOuest(x+1,y)){resultat=Direction.EST;haut=droite}}
  if (min(haut,bas)==bas){if (!aMurNord(x,y+1)){resultat=Direction.SUD}}
                 return resultat}   

def suivreLeChemin():Unit={
  var temp=Direction.NORD
  var x=getX()
  var y=getY()
  while (!estSurBiscuit()){
    temp=caseVoisineLaPlusProche(x,y)
    setDirection(temp)
    temp match{
      case Direction.NORD =>y=y-1
      case Direction.OUEST =>x=x-1
      case Direction.EST => x=x+1
      case _ =>y=y+1
    }
    avance()
  }
}

def distanceFin ():Unit={
  val X=trouveBiscuitX()
  val Y=trouveBiscuitY()
  if (X!=9999) {
  indiqueLeReste(X,Y,0)
  suivreLeChemin()
  }
}


             
             /*(x,y) match {
      au dessus
      //case _,0 => rien
      //case x,y if (y!=0)&&aMurNord(x,y) =>rien
      //case x,y if (y!=0)&&(!aMurNord(x,y))=> if (getIndication(x,y-1))!=9999 {indiqueLeReste(x,y-1)}
      //a gauche
      //case 0,_ => rien
      //case x,y if (x!=0)&&(aMurOuest(x,y))=> rien
      //case x,y if (x!=0)&&(!aMurOuest(x,y)) => if (getIndication(x-1,y))!=9999 {indiqueLeReste(x-1,y)}
      //a droite
      //case 6,_ => rien
      //case x,y if x!=6 =>if (getIndication(x-1,y))!=9999 {indiqueLeReste(x+1,y)}
      
      //case _,_ =>in
      
      //coin en haut à gauche
      case 0,0 if (getIndication(1,0)!=9999)&&getIndication(0,1))!=9999 => indiqueLeReste(1,0);indiqueLeReste(0,1)
      case 0,0 if (getIndication(1,0)!=9999)&&getIndication(0,1)==9999 => indiqueLeReste(1,0)
      case 0,0 if (getIndication(1,0)==9999)&&getIndication(0,1)!=9999 => indiqueLeReste(0,1)
      //coin en haut à droite
      case xmax-1,0 if (getIndication(xmax-2,0)!=9999)&&(getIndication(xmax-1,1)!=9999)&&(!aMurOuest(xmax-1,0)) => indiqueLeReste (xmax-2,0);indiqueLeReste(xmax-1)
      case xmax-1,0 if (getIndication(xmax-2,0)==9999)&&getIndication(xmax-1,1)!=9999 => indiqueLeReste(xmax-1,1)
      case xmax-1,0 if (getIndication(xmax-2,0)!=9999)&&(getIndication(xmax-1,1)==9999)&&(!aMurOuest(xmax-1,0)) => indiqueLeReste (xmax-2,0)
      //coin en bas à gauche
      case 0,ymax-1 if (getIndication(0,ymax-2)!=9999)&&(getIndication(1,ymax-1)!=9999)&&(!aMurNord(0,ymax-1)) => indiqueLeReste (0,ymax-2);indiqueLeReste(1,ymax-1)
      case 0,ymax-1 if (getIndication(0,ymax-2)==9999)&&getIndication(1,ymax-1)!=9999 => indiqueLeReste(1,ymax-1)
      case 0,ymax-1 if (getIndication(0,ymax-2)!=9999)&&(getIndication(1,ymax-1)==9999)&&(!aMurNord(0,ymax-1)) => indiqueLeReste(0,ymax-2)
      //coin en bas à droite
      case xmax-1,ymax-1 if (getIndication(xmax-2,ymax-1)!=9999)&&(getIndication(xmax-1,ymax-2)!=9999)&& => if (!aMurOuest(xmax-1,ymax-1)) {indiqueLeReste(xmax-2,ymax-1)}; if (!aMurNord(xmax-1,0)) {indiqueLeReste(xmax-1,ymax-2)}
      case xmax-1,ymax-1 if (getIndication(xmax-2,ymax-1)==9999)&&getIndication(xmax-1,ymax-2))!=9999 => if (!aMurNord(xmax-1,ymax-1)) {indiqueLeReste(xmax-1,ymax-2)}
      case xmax-1,ymax-1 if (getIndication(xmax-2,ymax-1)!=9999)&&getIndication(xmax-1,ymax-2))==9999 => if (!aMurOuest(xmax-1,ymax-1)) {indiqueLeReste(xmax-2,ymax-1)}
      //cas general */