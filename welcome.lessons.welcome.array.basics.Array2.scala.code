def lireColonne(taille:Int):Array[Color] = {
  
  var res = new Array[Color] (taille)
  res(0) = getCouleurSol()
  for (i <- 1 to taille -1) {
    avance()
    res(i) = getCouleurSol()
  }
  return res
}

def marquerSol() {baisseBrosse();leveBrosse()}

def premiereColonne() {
  var longueurTableau: Int = getWorldHeight()
  var res:Array[Color] = lireColonne(longueurTableau)
  for (k <- 0 to longueurTableau -3) {
    setCouleurBrosse(res(k))
    marquerSol()
    avance()
  }
}

def transition() {
  var longueurTableau: Int = getWorldHeight()
  for (l <- 1 to longueurTableau -1) {
    recule()
  }
  gauche()
  avance()
  droite()
  
}

override def run() {
  
  premiereColonne()
  transition()
  
}

def run1() {
  
  var longueurTableau: Int = getWorldHeight()
  var j:Int = 0
  var res:Array[Color] = lireColonne(longueurTableau)
  for (i <- 1 to longueurTableau -1) {
    for (j <- 1 to longueurTableau -1){
    val decalage = litMessage().toInt
    setCouleurBrosse(res(j+decalage))
    marquerSol()
    avance()
  	}
  var compteur:Int = 0
  for (compteur <- 1 to longueurTableau -1) {recule()}
  gauche()
  avance()
  droite()
	}
}