override def run() {
  var X = trouverXBiscuit()
  var Y = trouverYBiscuit()
  setIndication(X,Y,0)
  numeroterLesCases(X,Y,0)
    // Your code here
}

def trouverXBiscuit():Int=
{
  var X = 0
  var Y = 0
  while ((X,Y)!=(getMondeLargeur()-1,getMondeHauteur()-1) && !aBiscuit(X,Y))
         {
           if (X<getMondeLargeur()-1)
           {
             X+=1
           }
           else
           {
             X=0
             Y+=1
           }
         }
  return X
}

def trouverYBiscuit():Int=
{
  var X = 0
  var Y = 0
  while ((X,Y)!=(getMondeLargeur()-1,getMondeHauteur()-1) && !aBiscuit(X,Y))
         {
           if (X<getMondeLargeur()-1)
           {
             X+=1
           }
           else
           {
             X=0
             Y+=1
           }
         }
  return Y
}

def numeroterLesCases(X:Int, Y:Int, cpt : Int)
{ //Vérifie, si possible, dans les quatre directions et se relance si la case est accessible avec cpt incrémenté.
  if (!aMurNord(X,Y) && getIndication(X,Y)>=cpt && Y>0)
  //Si la voie est libre au Nord, 
  {
    setIndication(X,Y-1,cpt+1)
    numeroterLesCases(X,Y-1,cpt+1)
  }
  if (!aMurOuest(X,Y) && getIndication(X,Y)>=cpt && X>0)
  {
    setIndication(X-1,Y,cpt+1)
    numeroterLesCases(X-1,Y,cpt+1)
  }
  if (X+1<getMondeLargeur() && !aMurOuest(X+1,Y) && getIndication(X+1,Y)>=cpt)
  {
    setIndication(X+1,Y,cpt+1)
    numeroterLesCases(X+1,Y,cpt+1)
  }
  if (Y+1<getMondeHauteur() && !aMurNord(X,Y+1) && getIndication(X,Y+1)>=cpt)
  {
    setIndication(X,Y+1,cpt+1)
    numeroterLesCases(X,Y+1,cpt+1)
  }
}