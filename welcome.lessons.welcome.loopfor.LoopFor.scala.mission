<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
  </style>
</head><body>
<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h2>Boucles pour <tt>(for)</tt></h2>

<p>Les boucles <tt>while</tt> sont bien adaptées aux situations où l'on veut
réaliser une action tant qu'une condition est réalisée, mais elles sont
moins pratiques pour réaliser une action un nombre prédéterminé de fois. Par
exemple, lorsque nous voulions reculer de <code>nbPas</code> dans l'exercice
précédent, il fallait créer une nouvelle variable, l'initialiser, et
demander à reculer tant que la nouvelle variable n'était pas égale à
<code>nbPas</code>, en incrémentant cette variable à la main à la fin du
corps de la boucle.</p> 

<p>Dans ce genre de cas, les boucles de type <code>for</code> sont plus
pratique. Leur syntaxe est la suivante :</p> 
<pre> for (<b>variable</b> &lt;- <b>premiereValeur</b> to <b>derniereValeur</b>) { 
    <b>action</b>();
}</pre>

<p>Par exemple, pour répéter le corps de boucle <code>n</code> fois,

il faut écrire:</p>
<pre> for (<b>compteur</b> &lt;- <b>1</b> to <b>10</b>) { 
    <b>action</b>();
}</pre>

<p>This code is then equivalent to the following one from the computer point of
view. From the programmer point of view, one form or the other can make the
source code easier to read, depending on the situation. You should chose
wisely in each situation whether you want to use a for loop or a while
loop. Your uttermost goal should remain to keep your code simple and easy to
read, to ensure that your day remain pleasant and productive.
</p>
<pre>
var compteur = 0
while (compteur &lt; n) {
    <b>action</b>()
    compteur = compteur + 1
}</pre>

<p>In that case, the <code>for</code> loop is easier to read, don't you think?</p>

 
<p>Si vous avez l'intention d'imbriquer plusieurs boucles, il est possible de
l'écrire en une seule ligne en Scala. Les deux morceaux de code sont
équivalents:</p>
<pre>for (compteur1 &lt;- 1 to n) {
    for (compteur2 &lt;- 1 to m) {
       actions()
    }
}</pre> 
<pre>for (compteur1 &lt;- 1 to n; compteur2 &lt;- 1 to m) { <span class="comment">// Séparez simplement les deux conditions de boucle par un point-virgule (;)</span>
    actions()
}</pre> 


<h3>Objectif de cet exercice</h3>
<p> Il s'agit maintenant de refaire le même exercice que précédemment (avancer
jusqu'à trouver un baggle, le ramasser, revenir là où on était au début puis
reposer le baggle), mais en utilisant une boucle <tt>for</tt> pour revenir
au point de départ à la place d'une boucle <code>while</code>.</p>

<p>Une fois ceci fait, vous pouvez passez à l'exercice suivant.</p>
</body></html>