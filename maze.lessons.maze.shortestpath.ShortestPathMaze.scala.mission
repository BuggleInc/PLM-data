<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
  </style>
</head><body>
<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h2>Algorithme basique de recherche du plus court chemin</h2>

<p>Pour conclure avec cette leçon d'introduction aux algorithmes de sortie de
labyrinthe, nous allons étudier un autre moyen de trouver la sortie. La
buggle de cette leçon est spéciale : c'est une jedi. Il peut ressentir la
Force. Cela signifie qu'elle peut ressentir son environnement.</p>

<p>Sans même changer de place, elle peut retrouver des informations sur le
monde qui l'entoure, avec les instructions suivantes&nbsp;:</p>
<ul>
  <li><code>getMondeLargeur()</code> pour connaître la largeur du monde</li>
  <li><code>getMondeHauteur()</code> pour connaître la hauteur du monde.</li>
  <li><code>aMurNord(x,y)</code> indique si la cellule (x,y) de ce monde est
fermée par un mur en haut.</li>
  <li><code>aMurOuest(x,y)</code> indique si la cellule (x,y) de ce monde est
fermée par un mur à gauche.</li>
  <li><code>aBiscuit(x,y)</code> indique si un baggle se trouve dans la cellule
(x,y) de ce monde.</li>
  <li><code>setIndication(x,y,i)</code> ajoute une indication entière
<code>i</code> sur le sol de la cellule (x,y).</li>  
  <li><code>getIndication(x,y)</code> retourne l'indication entière qui se trouve
dans la cellule (x,y) (ou bien la valeur 9999 s'il n'y a pas d'indication à
l'endroit indiqué).</li>  
</ul>

<p>Il est bon de noter qu'il n'est pas possible de construire un mur sur le
côté inférieur ou le coté droit d'une case. Néanmoins, quand de tels murs
existent, cela signifie qu'il a été construit sur une case voisine -- comme
mur supérieur (respectivement gauche) sur la case qui est située en dessous
(respectivement sur à droite) de la case courante.</p>

<h3>Objectif de cet exercice</h3>

<p>Votre buggle devrait tout d'abord écrire sur chaque case importante la
distance qui la sépare de la sortie.<br/>
Pour cela, trouvez la sortie et écrivez 0 dessus. Ensuite, écrivez 1 sur
toutes les cases adjacentes à la sortie qui n'en sont pas séparées par un
mur. Ensuite, écrivez 2 sur toutes les cases à partir desquelles on peut
atteindre une case marquée 1, puis faites de même pour toutes les cases
jusqu'à numéroter la case où se trouve votre buggle.</p>

<p>Une fois que toutes les cases sont marquées, faites en sorte que votre
buggle jedi trouve le plus court chemin en suivant les indications écrites
au sol. Pour cela, il lui suffit à chaque pas d'aller sur la case de plus
petite distance parmi celles accessibles. Vous pouvez utiliser la méthode
<code>void setDirection(Direction d)</code> pour faire regarder votre buggle
dans une direction spécifique comme
<code>Direction.NORD</code>,
<code>Direction.SUD</code>,
<code>Direction.EST</code> ou
<code>Direction.OUEST</code>, qui correspondent
respectivement au nord, sud, est et ouest.</p>

<a href="#tip-1">Je suis perdu, je voudrais plus d'indications</a>	
</body></html>