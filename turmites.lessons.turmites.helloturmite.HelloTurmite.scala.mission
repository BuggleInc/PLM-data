
<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h2>Turmites</h2>

<p>Cette exercice explore une nouvelle façon d'étendre le concept de la fourmi
de Langton. Maintenant, le comportement de la fourmi ne dépend plus
seulement de la couleur du sol, mais aussi de son état interne (représenté
par une valeur entière). L'idée de changer la fourmi en un automate découle
naturellement du concept de la machine de Turing. Ceci explique le nom de
ces nouveaux animaux, qui est un mélange de <i>Turing</i> et de
<i>Termite</i> (si vous ne savez pas ce qu'est une machine de Turing, vous
devriez vous jeter sur Wikipedia parce qu'il est tout simplement impossible
d'être un vrai informaticien sans le savoir).</p>     

<p>Une fois encore, vous devez seulement écrire la méthode <code>step()</code>,
qui s'occupe de faire faire un pas à la turmite. Une fois encore, vous devez
tout d'abord trouver le rang de la couleur actuelle du sol dans la liste des
couleurs. Mais cette fois, <code>rule</code> dépend à la fois de la couleur
courante et de l'état courant. <code>rule</code> contient en fait trois
informations dans chaque situation : la couleur à mettre, le mouvement à
effectuer, et la valeur du prochain état.
Par exemple, rule(1)(0) contient
l'information à utiliser quand <code>state==1</code> et
<code>color==0</code>. En d'autres mots, vous pouvez récupérer l'information
relative à votre situation actuelle en utilisant
<code>rule(etatCourant)(couleurActuelle)</code></p> 

<p>Chaque ensemble d'informations contient trois valeurs.
La première est le rang de la couleur à mettre sur le sol.
La deuxième est le mouvement à effectuer, avec la notation suivante :
0=stop, 1=pas de virage, 2=gauche, 4=demi-tour, 8=droite. Veuillez noter que
si l'instruction est stop, vous ne devez même pas avancer sur cette étape
(mais vous ne devez pas arrêter votre programme pour autant : les prochains
pas peuvent faire quelque chose d'autre). Finalement, le troisième entier
est la valeur du prochain <code>state</code> à avoir après cette itération.</p> 

<p>Puisque ces notations arbitraires sont parfois difficiles à se souvenir,
vous devriez définir un ensemble de constantes que vous pouvez utiliser à la
place des valeurs numériques. Leurs noms pourraient être GAUCHE, DROITE,
etc.
Déclarez simplement ces valeurs avec le mot-clé <code>val</code> au
lieu de <code>var</code>. De toute façon, on devrait toujours utiliser
<code>val</code> au lieu de <code>var</code> quand on peut.


Vous devriez les écrire en dehors de toute méthode pour les rendre visible
de partout.</p>

<p>Utilisez de telles constantes aident beaucoup à rendre le code plus lisible.
Comparez les deux morceaux de code suivant:</p> 

<pre>if (rule(etat)(couleurActuelle)(MVT_SUIVANT) == GAUCHE) {
    gauche()
}</pre>
<p>C'est un peu plus long, mais bien plus agréable à lire que ceci&nbsp;:</p>
<pre>if (rule(i)(j)(1) == 2) {
    gauche()
}</pre>
 
 <p>Vous devriez probablement utiliser un filtrage
pour que votre code reste lisible. Si vous avez oublié ce que c'est,
retournez à <a href="plm://lessons.welcome/bdr.BDR2">cet exercice</a>.</p>

<p>Vous devriez maintenant avoir assez d'informations pour réussir.</p>

<h2>Notes bibliographiques</h2>
<p>D'après Wikipedia, les turmites ont été inventés indépendamment à la fin des
années 80. Il a été démontré que les turmites en général sont exactement
équivalent en terme de puissance à des machines de Turing à une dimension
avec un ruban infini, et peut donc simuler les autres. Cela signifie
qu'absolument tous les programmes auxquels vous pouvez penser peuvent
théoriquement être calculé sur cet outil.</p>
