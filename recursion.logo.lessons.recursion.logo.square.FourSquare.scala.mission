
<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h2>Les petites cousines des Buggles</h2>
<p>
Aujourd'hui, nous allons faire la connaissance des petites cousines des
buggles : les tortues. En fait, les tortues sont bien plus vieilles que les
buggles. Elles ont ?t? invent?es dans les ann?es 70 par un scientifique du
MIT nomm? Seymour Papert pour aider ? l'enseignement de la programmation, et
les buggles sont une variation sur le th?me invent?e par Lyn Turbak du
Wellesley College plus tard.
</p>
<p>Les tortues sont donc un peu comme les buggles, en plus petit.  Comme les
buggles, vous pouvez leur demander d'avancer, de tourner, de reculer,
etc. Comme les buggles, elles laissent une trace sur leur passage quand
elles avancent (simplement, le trait est bien plus fin).</p>

<p>La principale diff?rence est que l? o? les buggles ne peuvent tourner que de
quarts de tour, les tortues peuvent tourner d'un angle quelconque pr?cis?
par un nombre r?el (double). Cela leur donne bien plus de libert? dans leur
mouvement. Les buggles savent faire plusieurs trucs qui ?chappent aux
tortues, comme lire et ?crire des messages sur le sol ou ramasser des
objets, et il y a parfois des murs dans leur univers, mais tout cela d?passe
compl?tement les tortues.</p>

<p>D'un point de vue pratique, la plupart des m?thodes que vous connaissez ?
propos des buggles fonctionnent ?galement avec les tortues, ? quelques
variantes pr?s. En particulier, la m?thode <code>avance</code> prend en
argument le nombre de pas donn? comme un double (voir ?Aide / ? propos de ce monde?
dans le menu pour plus de d?tails).</p>


<h3>Des doubles ? Mais qu'est ce que c'est ?</h3>
C'est simplement un nombre ? virgule. Exemple:
<pre>
double x = 3.72;
x + 1.234 // Valeur = 4.954
x + 2. // Valeur = 5.72 (2. signifie 2.0)
x + 2 // Erreur de typage (l'op?rateur + operator ne m?lange pas les Double avec les Int). Il faut convertir explicitement
x * 2. // Valeur = 7.44
x / 2. // Valeur = 1.86 (2 converti en 2.0 automatiquement)
x.asInstanceOf[Int] // Valeur = 1 (?transtypage en int?, converti en entier en tronquant)
Math.round(x) // Valeur = 2 (1.86 arrondi ? l'entier le plus proche)
Math.floor(x) // Valeur = 1 (1.86 arrondi en direction de moins l'infini)
Math.floor(-5.12) // Vale = -6 (Arrondi en direction de moins l'infini)
Math.ceiling(x) // Value = 2 (1.86 arrondi en direction de plus l'infini)
Math.ceiling(-5.12) // Value = -5 (Arrondi en direction de plus l'infini)
17.asInstanceOf[Double] // Value = 17.0 (?transtypage en double?, converti en double)
</pre>


<h3>Objectif de l'exercice</h3>
<p>Bien que ce soit le premier exercice de la le?on sur la r?cursivit?, le code
que vous devez ?crire n'est pas r?cursif. L'objectif est de se familiariser
avec le monde des tortues avant d'attaquer les choses s?rieuses.</p>

<p>Vous devez reproduire une forme g?om?trique simple faite de quatre carr?s de
longueur 100 de cot? (voir le monde objectif pour plus de d?tails). C'est
sans doute une bonne id?e d'?crire une m?thode pour faire un carr?, et de la
r?utiliser lors de l'?criture de votre code.</p>
