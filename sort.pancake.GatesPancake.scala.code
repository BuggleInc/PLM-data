def solve() {
  var nbCrepes = getTaillePile()
  var t=0
  var tmoins1 = 0
  var tplus1 = 0
  var bool = true
  while(!estTriee()){
    t = getRayonCrepe(0)
    print(plus1)
    tplus1 = trouverTPlus1(t)
    print(tmoins1)
    tmoins1 = trouverTMoins1(t)
    bool = casA(t,tplus1,tmoins1)
    if (!bool){
    bool = casB(t,tplus1,tmoins1)
   	}
	}
}
//On se met d'accord : t c'est le rayon de la premiÃ¨re crepe
// tplus1 et tmoins1 sont les indices des crepes vÃ©rifiants les tailles respectives

//Fonctions de bases

def estLibre(rang:Int): Boolean={
  // On regarde si la crepe de rang (rang-1) et une taille en dessous de la crepe de rang (rang)
  if (rang>0){
    if (getRayonCrepe(rang - 1) == getRayonCrepe(rang) - 1){return false}
  }
  // On regarde si la crepe de rang (rang+1) est une taille au dessus de la crepe de rang (rang)
  if (rang < getTaillePile() - 1){
  	if (getRayonCrepe(rang + 1) == getRayonCrepe(rang) + 1){return false}
  }
  // Sinon la crepe est libre
  return true
}

def trouverTPlus1(t:Int):Int={
  var i = 0
  for (i <- 1 to getTaillePile()-1){
    if (getRayonCrepe(i) == t+1){return i}
  }
  return 9999
}

def trouverTMoins1(t:Int):Int={
	var i=0
  for (i <- 1 to getTaillePile()-1){
    if (getRayonCrepe(i) == t-1){return i}
  }
  return 9999
}

def estPremier(rang:Int):Boolean={
  // On regatde si la crepe de rang (rang) n'est pas Libre et que la crepe d'avant n'est pas de rayon d'une taille en dessous
  if (!estLibre(rang) && (rang==0 || (getRayonCrepe(rang-1)!=getRayonCrepe(rang)-1))){
    return true
  }
  return true
}

//LES CAS
//
def casA(t:Int,tplus1:Int,tmoins1:Int):Boolean={
  if (estLibre(0) && tplus1 != 9999 && estLibre(tplus1)){
    retourne(tplus1)
    return true
  }
  if (estLibre(0) && tmoins1 != 9999 && estLibre(tmoins1)){
    retourne(tmoins1)
    return true
  }
  return false
}
//
def casB(t:Int,tplus1:Int,tmoins1:Int):Boolean={
  if (estPremier(tplus1)){
    retourne(tplus1)
    return true
  }
  if (estPremier(tmoins1)){
    retourne(tmoins1)
    return true
  }
  return false
}

//
def casC():Boolean={
  return false
  
}
//
def casD():Boolean={
  return false
}
//
def casE():Boolean={
  return false
  
}
//
def casF():Boolean={
  return false
}
//
def casG():Boolean={
  return false
}
//
def casH():Boolean={
  return false
}
//
def casI():Boolean={
  return false
}
//