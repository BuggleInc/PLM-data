<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
  </style>
</head><body>
<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h1>Listes et tricot</h1>

L'objectif de cet exercice est de reproduire le motif de la première colonne
en le décalant d'une case (voir l'onglet «Objectif» pour plus de
détails). La grande différence entre cet exercice et les précédents sur les
motifs, c'est qu'il faut maintenant lire (sur la première colonne) le motif
souhaité, puis le reproduire ensuite. Il est impossible de faire autrement
car votre programme sera exécuté par trois buggles dans trois mondes
différents, chacune ayant un motif propre à reproduire.

<p>Une possibilité est de lire la prochaine case, puis d'aller la recopier en
position, avant de revenir lire la case suivante, etc. Mais comme vous
n'avez pas le droit d'utiliser les méthodes permettant de téléporter la
buggle à une case particulière (<code>setPos()</code> et autres), cette
façon de faire va être très pénible à mettre en place. </p>
 
<p>Le plus simple est de stocker l’enchaînement de couleurs constituant le
motif dans
une <b>liste</b>.
Mais avant de pouvoir faire cela, nous devons en apprendre un peu plus sur
les listes.</p>

<h2>Les listes</h2> 

<p>Une liste est une séquence ordonnée
de variables qui marchent ensemble.
C'est un peu similaire à une commode dont les différents tiroirs peuvent
stocker des valeurs différentes.
Chaque variable de la séquence est identifiée par sa position et peut
stocker une valeur spécifique.
.
Il est cependant possible de contourner cette restriction en utilisant le
type de données <code></code> qui peut
contenir  tous les autres type de données.

Il est cependant raisonnable de rendre ses tableaux aussi spécifiques que
possible. Si vous avez l'intention de stocker des entiers, faites en un
tableau de , pas de
.[/!]
Les listes peuvent contenir des données de différents types, en
mélangeant par exemple quelques valeurs entières dans certaines cellules
avec des entiers dans d'autres cellules.</p>

<div style="text-align:center"><img src="lessons/welcome/array/array.png"/></div>

<p>T est le nom de la liste,
T[0] est le nom de la première case,
T[1] de la deuxième case,
T[2] de la troisième case, etc...
Et oui, la première case est T[0] et la
dernière case
d'une liste de taille N est
T[N-1].
Cela peut sembler étrange de commencer à compter à partir de 0 et non de 1,
mais c'est ainsi (et cela s'explique par des raisons historiques obscures).</p>

<h3>Usage de base</h3>

<p>On peut utiliser une variable entière <i>i</i> pour accéder avec
T[i] aux cases.
Quand <i>i</i> vaut 0 alors T[i] dénote la
case T[0];
lorsque <i>i</i> vaut 10,  T[i] dénote
T[10].
On dit alors que <i>i</i> est un <b>indice</b> dans la liste T.
<code>T[i]</code> peut être utilisé comme
n'importe quelle variable.
On peut lui affecter une nouvelle valeur:</p> 
<pre>T[i] = 78</pre>

<p>On peut réutiliser et tester cette valeur : </p>
<pre>x = T[i]</pre>

<p>On peut tester cette valeur :</p>
<pre>if (T[i] > 0) :
    # instructions...
</pre>

<p>Il est également très simple de parcourir toute la liste, par exemple pour initialiser chaque
cellule.</p>

<pre>for i in range(len(T)):
   T[i] = 3
</pre>

<p>
La fonction <code>len()</code> renvoie la longueur de la liste
T,
ce qui permet de construire facilement la boucle.
En fait, la fonction <code>len()</code> est bien plus générique et
peut être utilisée pour calculer la taille de nombreux objets. Appliquée à
une chaîne de caractères par exemple, elle retourne le nombre de caractères
composant cette chaîne.
</p>

<p>Si vous souhaitez simplement parcourir les valeurs de T sans avoir besoin de
l'index de chaque valeur, vous pouvez écrire simplement :</p>
<pre>for i in T:
  action()
</pre>
<p>
Cette écriture est finalement très semblable à la
précédente.
Simplement, <code>range(n)</code> retourne un
ensemble d'entiers sur lequel la boucle <code>for</code> itère.
En fait, python offre d'autres moyens très élégants de traverser des
listes
et d'autres collections de données. Mais cela devrait être le sujet
d'exercices spécifiques (qui restent à écrire dans PLM).</p>


<h3>Déclarer une liste</h3>


<p>Si vous connaissez à l'avance le contenu de votre liste, vous pouvez
affecter ces valeurs directement. Placez-les simplement entre crochets et
séparées par des virgules comme ceci&nbsp;:</p>
<pre>
L = [1, 3, 5, 7, 9] 
<span class="comment"># L est maintenant une liste de 5 valeurs, toutes des entiers</span></pre>
<p>Dans le cas contraire, le plus simple est de créer une liste vide puis
d'ajouter chaque valeur séparément à la liste&nbsp;:</p>
<pre>
L2 = [] 
<span class="comment"># L2 est maintenant une liste vide</span>
L2.append(1)
L2.append(3)
L2.append(5)
L2.append(7)
L2.append(9) 
<span class="comment"># Son contenu est maintenant le même que celui de L ci-dessus</span></pre> 
 

<h3>Les listes et les paramètres de
méthodes</h3>
<p>On peut tout à fait passer une liste
en paramètre d'une méthode. La méthode peut alors l'utiliser comme si la
variable avait été définie localement:</p>
<pre>def a42Premier(liste):
  return liste[0] == 42</pre>

<p>Coté appelant, c'est aussi simple :</p>
<pre>tab = [1, 3, 5, 7, 9]
if (a42Premier(tab)):
   <span class="comment"># faire des choses</span>
</pre>



<p>Les méthodes peuvent également retourner des
listes comme résultat sans aucun
problème.
Voici une méthode retournant une
liste de la taille demandée après avoir initialisé toutes les cases à la
valeur 42.</p>

<pre>def remplir42(taille):
    res = []
    for i in range(taille):
        res.append(42)
    return res</pre>

<h2>Objectif de l'exercice</h2>

<p>Enfin ! Après toutes ces explications, nous pouvons revenir à l'exercice.</p>
<p>Votre mission est plutôt simple au fond. Votre code doit sauvegarder le
motif de couleurs observé sur la première colonne. Il faut bien entendu
sauvegarder ces valeurs dans une
liste.
Le plus simple pour cela est de créer une liste vide puis d'y
adjoindre (avec <code>append()</code> les différentes couleurs lues sur le
sol de la première colonne (avec <code>getCouleurSol()</code>).
</p>  

<p>Une fois le motif de la première colonne lu et sauvegardé, il faut le
répliquer sur toutes les colonnes, par exemple en exécutant
<code>getMondeLargeur()</code> fois une méthode écrite tout exprès.</p> 
</body></html>