def concat(l1:List[Int], l2:List[Int]): List[Int] = {
  
  def ajout_droite(l:List[Int], v:Int):Int={
    return reverse(v :: reverse(l))
    
  }
  
  def reverse(l:List[Int]):List[Int] = {
  
	def compute_reverse(l:List[Int], acc:List[Int]):List[Int] = {
    if(l == Nil){
      return acc;
    } else {
      compute_reverse(l.tail, l.head :: acc);
    }
    
    
  }
  return compute_reverse(l, List())
	}
  
  if(l2 != Nil){
    concat(ajout_droite(l1, l2.head), l2.tail)
  } else {
    return l1;
  }
  
}