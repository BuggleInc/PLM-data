// this method works
def isWallAtLeft () : Boolean = {
  left();
  var answer = isFacingWall();
  right();
  return answer;
}

// this one is unnecessary
def isDirectionFree (direction : Direction) : Boolean = {
  var pos = getDirection();
  setDirection(direction);
 	var answer = !isFacingWall();
  setDirection(pos); // bring back to the initial position
  return answer;
}

// convoluted with staying the wall at the left and refresh sommeAngle's state
def leftFollowerMode(sommeAngle : Int) : Int = {
  var x = sommeAngle;
  while ((getDirection() != Direction.NORTH) || isFacingWall()) {
     if (!isFacingWall()) {
     	forward();
      if (!isWallAtLeft()) {
    	 	left();
        x += 1;
        forward();
        if (!isWallAtLeft()) {
      	  left();
          x += 1;
          forward();
        }
      }
     } else { right(); x -= 1;} 
  } ; return x;
}

// this method works
def northRunnerMode () {
	while (getDirection() != Direction.NORTH) { // auto-orientation
  	right();
  }
  while (!isFacingWall()) { // forward as long is possible 
  	forward();
  }
}

def makeMoving() {
  var sommeAngle = -999;
  while (!isOverBaggle()) {
    if (sommeAngle == -999) { // if it's the first loop
 			sommeAngle = 0
      northRunnerMode();
      // make sure that there is a wall on the left before calling the leftFollower mode
      while (!isWallAtLeft()) { 
      	right();
        sommeAngle -= 1;
      } 
      sommeAngle = leftFollowerMode(sommeAngle);
    } else {
      	if (sommeAngle%4 != 0) { // if it hadn't made a loop
    			northRunnerMode();
     			while (!isWallAtLeft()) { // auto-orientation
      			right();
            sommeAngle -= 1;
      		} 
      		sommeAngle = leftFollowerMode(sommeAngle);
    		} else { sommeAngle = leftFollowerMode(sommeAngle); northRunnerMode();}
    	}    
  }
  pickupBaggle();
}

override def run() { 
	makeMoving();
}