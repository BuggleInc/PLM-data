boolean ended(){
	boolean remember;
	left();
	remember = isFacingWall();
	right();
	return remember;
}

void fillColumn(Color[] colors){
	int offset = Integer.parseInt(readMessage());
	int index = offset;
	while(!isFacingWall()){
		mark(colors[index % colors.length]);
		forward();
		index++;
	}
	mark(colors[index % colors.length]);
	toWall();
}

void mark(Color c){
	brushDown();
	setBrushColor(c);
	brushUp();
}

void nextColumn(){
	left();
	forward();
	right();	
}

int getSideSize(){
	int i = 0;
	while(!isFacingWall()){
		forward();	
		i++;
	}
	toWall();
	return i;
}

void toWall(){
	while(!isBackingWall())
		backward();
}


Color[] getOrder(int size){
	Color[] colors= new Color[size];
	int i = 0;
	while(!isFacingWall()){
		colors[i] = getGroundColor();
		i++;
		forward();
	}
	colors[i] = getGroundColor();
	toWall();
	return colors;
}

void exec(){
	Color[] colors = getOrder(getWorldHeight());
	while(!ended()){
		nextColumn();
		fillColumn(colors);
	}
}

public void run(){
	exec();
}