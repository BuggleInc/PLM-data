override def run() {
  var nbBases = getNombreBases()
  var nbPos = getNombrePositions()
  while (!estTrie()){
    while(!estTrie() && (getTrouBase() < nbBases - 1)){
      deplace(getTrouBase()+1,min(getTrouBase()+1))
    }
    while(!estTrie() && (getTrouBase() > 0)){
      deplace(getTrouBase()-1,max(getTrouBase()-1))
    }
  }
}

//Nouvelles fonction
//base=index/2
//pos=index%2
//index=base*2+pos

def trouveTrou():Int ={
  var nbPos = getNombrePositions()
  var b = getTrouBase()
  var p = getTrouPosition()
  return b*nbPos + p
}

def couleurJoueur(index:Int) : Int={
  var nbPos = getNombrePositions()
  var	nbBases = getNombreBases()
 	var b= index/nbPos
 	var p= index%nbPos
  return getCouleurJoueur(b%nbBases,(p+nbPos)%nbPos)
}

//Deplace selon l'index
def deplace(index:Int){
  var nbPos = getNombrePositions()
  var nbBases = getNombreBases()
  var b = index/nbPos
  var p =index%nbPos
  deplace((b+nbBases)%nbBases,(p+nbPos)%nbPos)
}

//On regarde le plus petit de la base
def min(base:Index):Int{
  nbPos = getNombrePositions()
  pos = 0
  retour = 0
  col = 9999
  for (pos <-0 to nbPos-1){
    if (getCouleurJoueur(base,pos) < col){
      col = getCouleurJoueur(base,pos)
      retour = pos
    }
  }
  return retour
}

//On regarde le plus haut de la base
def max(base:Index):Int{
  nbPos = getNombrePositions()
  pos = 0
	retour = 0
  col = -1
  for (pos <- 0 to nbPos-1){
    if (getCouleurJoueur(base,pos) > col){
      col = getCouleurJoueur(base,pos)
      retour = pos
    }
  }
	return retour
}