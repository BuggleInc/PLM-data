island:6: error: not found: type niv
def is(num:Array[Int], Int:niv):Int = 
                           ^island:25: error: not found: type niv
def premier(tab:Array[Int], Int:niv):Int = 
                                ^island:12: error: not found: value niv
		var pr:Int = premier(num, niv);
                                          ^island:14: error: missing arguments for method premier in class island;
follow this method with `_' if you want to treat it as a partially applied function
		if (premier == -1)
                    ^island:37: error: Int is already defined as value Int
def deuxieme(tab:Array[Int], Int:x, Int:niv):Int = 
                                    ^island:37: error: not found: type x
def deuxieme(tab:Array[Int], Int:x, Int:niv):Int = 
                                 ^island:37: error: not found: type niv
def deuxieme(tab:Array[Int], Int:x, Int:niv):Int = 
                                        ^island:18: error: missing arguments for method premier in class island;
follow this method with `_' if you want to treat it as a partially applied function
			var de:Int = deuxieme(num, premier, niv);
                                                   ^island:48: error: Int is already defined as value Int
def subTab(tab:Array[Int], Int:x, Int:y):Array[Int] = 
                                  ^island:48: error: not found: type x
def subTab(tab:Array[Int], Int:x, Int:y):Array[Int] = 
                               ^island:48: error: not found: type y
def subTab(tab:Array[Int], Int:x, Int:y):Array[Int] = 
                                      ^island:20: error: not found: value x
			return 1 + is(subTab(num, x, y), niv + 1) + is(subTab(num, y + 1, num.length - 1), niv); 
                                                  ^island:29: error: not found: value niv
	while (i < tab.length && tab(i) > niv)
                                          ^island:32: error: not found: value niv
	if (i == tab.length - 1 && tab(i) == niv)
                                             ^island:39: error: not found: value x
	var i:Int = x;
                    ^island:41: error: not found: value niv
	while(i < tab.length && tab(i) > niv)
                                         ^island:50: error: not found: value y
	var taille:Int = y - x + 1;
                         ^island:53: error: not found: value x
	for (i <- x to y)
                  ^