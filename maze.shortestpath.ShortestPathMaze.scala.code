override def run() {
    
  val n = getWorldWidth()
  val m = getWorldHeight()
  
  var x = n-1
  var y = 0
  while(!hasBaggle(x,y))
    y+=1
  
  
  
  var _C : Array[Int] = new Array[Int] (1)
  
  _C(1)=x+100*y+10000*0
  
  while(_C.size != 0){
    var elements : Int = 4 * _C.size
    var _C_ : Array[Int] = new Array[Int] (elements)

    for(it <- 0 to _X.size -1){
      
      
      var x = _C(it)%100
      var y = (_C(it)/100).toInt % 100
      var num = (_C(it)/10000).toInt


      if(x>0 && !hasLeftWall(x,y) && getIndication(x-1,y)==9999){
        setIndication(x-1,y,num+1)
        _C_(4*it)=x-1 + 100*y + 10000*(num+1)
      }
      else{
        _C_(4*it)=-1
        elements-=1
      }
      
      if(y>0 && !hasTopWall(x,y) && getIndication(x,y-1)==9999 ){
        setIndication(x,y-1,num+1)
        _C_(4*it+1)=x+100*(y-1)+10000*(num+1)
      }
      else{
        _C_(4*it+1)=-1
        elements-=1
      }
      
      if(x<n-1 && !hasLeftWall(x+1,y) && getIndication(x+1,y)==9999 ){
        setIndication(x+1,y,num+1)
        _C_(4*it+2)=x+1+100*y+10000*(num+1)
      }
      else{
        _C_(4*it+2)=-1
        elements-=1
      }
      
      if(y<m-1 && !hasTopWall(x,y+1) && getIndication(x,y+1)==9999){
        setIndication(x,y+1,num+1)
        _C_(4*it+3)=x+100*(y+1)+10000*(num+1)
      }
      else{
        _C_(4*it+3)=-1
        elements-=1
      }
     

    }
  }
}


def writePath(x : Int , y : Int, num : Int , n : Int, m : Int){
    
  setIndication(x,y,num)

  
  if(x>0 && !hasLeftWall(x,y) && getIndication(x-1,y)==9999){
    writePath(x-1,y,num+1,n,m)
  }
  if(y>0 && !hasTopWall(x,y) && getIndication(x,y-1)==9999 ){
    writePath(x,y-1,num+1,n,m)
  }
  if(x<n-1 && !hasLeftWall(x+1,y) && getIndication(x+1,y)==9999 ){
    writePath(x+1,y,num+1,n,m)
  }
  if(y<m-1 && !hasTopWall(x,y+1) && getIndication(x,y+1)==9999){
    writePath(x,y+1,num+1,n,m)
  }
}
