def trouveLaSortie(): Array[Int] = {
  var xMax:Int = getMondeLargeur() - 1
	var yMax:Int = getMondeHauteur() - 1
  
  for (x <- 0 to xMax) {
    for (y <- 0 to yMax) {
      if (aBiscuit(x, y))
      	return Array[Int](x, y)
    }
  }
  
  return Array[Int](2)
}

def casesAdjacentes(pos: Array[Int]): Array[Array[Int]] = {
  var xMax:Int = getMondeLargeur() - 1
	var yMax:Int = getMondeHauteur() - 1
  
  var result:Array[Array[Int]] = Array[Array[Int]]()
  
  if (pos(0) > 0) {
    result :+ Array[Int](pos(0) - 1, pos(1))
  }
  
  if (pos(0) < xMax) {
    result :+ Array[Int](pos(0) + 1, pos(1))
  }
  
  if (pos(0) > 0) {
    result :+ Array[Int](pos(0), pos(1) - 1)
  }
  
  if (pos(1) < yMax) {
    result :+ Array[Int](pos(0), pos(1) + 1)
  }
  
  return result
}

// Retourne le nombre de cases marquées.
def marqueCases(poidsCourant: Int):Int = {
  var result:Int = 0
  
  var xMax:Int = getMondeLargeur() - 1
	var yMax:Int = getMondeHauteur() - 1
  
  // On parcourt le labyrinthe à la recherche de cases marquées par 'poidsCourant'.
 	for (x <- 0 to xMax) {
    for (y <- 0 to yMax) {
      if (getIndication(x, y) == poidsCourant) {
        // On cherche les cases adjacentes...
        var casesAMarquer:Array[Array[Int]] = casesAdjacentes(Array[Int](x, y))
        
        for (i <- casesAMarquer) {
          if (getIndication(i(0), i(1)) == 9999) {
            // On peut marquer cette case ! :D
            setIndication(i(0), i(1), poidsCourant + 1)
            
            result += 1
          }
        }
      }
    }
  }
  
  return result
}

def ecritIndications() {
  // Tout d'abord, il faut trouver la sortie ! :p
  var posSortie:Array[Int] = trouveLaSortie()
  
  setIndication(posSortie(0), posSortie(1), 0)
  
  // Maintenant on écrit les indications sur les cases adjacentes.
  var casesMarquees:Int = 1
  var poidsCourant:Int = 0
  
  while (casesMarquees != getMondeHauteur() * getMondeLargeur()) {
    casesMarquees += marqueCases(poidsCourant)
    
    poidsCourant += 1
  }
}

override def run() {
  var xMax:Int = getMondeLargeur() - 1
	var yMax:Int = getMondeHauteur() - 1
  
  // On commence par écrire les indications sur les cases.
  ecritIndications()
}