Lander:19: error: type mismatch;
 found   : lessons.lander.universe.Point
 required: (lessons.lander.universe.Point, lessons.lander.universe.Point)
	return Array(new Point(test1.x,test1.y),new Point(test2.x,test2.y))
                     ^Lander:21: error: type mismatch;
 found   : lessons.lander.universe.Point
 required: (lessons.lander.universe.Point, lessons.lander.universe.Point)
return Array(Point(0,0), Point(1999,0))
                  ^Lander:31: error: overloaded method value <= with alternatives:
  (x: Double)Boolean <and>
  (x: Float)Boolean <and>
  (x: Long)Boolean <and>
  (x: Int)Boolean <and>
  (x: Char)Boolean <and>
  (x: Short)Boolean <and>
  (x: Byte)Boolean
 cannot be applied to ((lessons.lander.universe.Point, lessons.lander.universe.Point))
	if (getX() <= zone(0).x) {return 0}
                   ^Lander:33: error: overloaded method value >= with alternatives:
  (x: Double)Boolean <and>
  (x: Float)Boolean <and>
  (x: Long)Boolean <and>
  (x: Int)Boolean <and>
  (x: Char)Boolean <and>
  (x: Short)Boolean <and>
  (x: Byte)Boolean
 cannot be applied to ((lessons.lander.universe.Point, lessons.lander.universe.Point))
		if (getX()>=zone(1).x) {return 2}
                          ^Lander:33: error: type mismatch;
 found   : Unit
 required: Int
		if (getX()>=zone(1).x) {return 2}
                ^Lander:37: error: overloaded method value <= with alternatives:
  (x: Double)Boolean <and>
  (x: Float)Boolean <and>
  (x: Long)Boolean <and>
  (x: Int)Boolean <and>
  (x: Char)Boolean <and>
  (x: Short)Boolean <and>
  (x: Byte)Boolean
 cannot be applied to ((lessons.lander.universe.Point, lessons.lander.universe.Point))
	if (getX() <= zone(0).x) {return 0}
                   ^Lander:39: error: overloaded method value >= with alternatives:
  (x: Double)Boolean <and>
  (x: Float)Boolean <and>
  (x: Long)Boolean <and>
  (x: Int)Boolean <and>
  (x: Char)Boolean <and>
  (x: Short)Boolean <and>
  (x: Byte)Boolean
 cannot be applied to ((lessons.lander.universe.Point, lessons.lander.universe.Point))
		if (getX()>=zone(1).x) {return 2}
                          ^Lander:39: error: type mismatch;
 found   : Unit
 required: Int
		if (getX()>=zone(1).x) {return 2}
                ^Lander:43: error: not found: value setPousseedesiree
  		setPousseedesiree(4) 
                ^Lander:49: error: not found: value setPousseedesiree
setPousseedesiree(4)
^Lander:51: error: not found: value setPousseedesiree
else setPousseedesiree(0)
     ^Lander:36: error: method position is defined twice
  conflicting symbols both originated in file 'plm.runtime77.Lander'
  	def position():Int =
            ^Lander:55: error: not found: value setPousseedesire
  		setPousseedesire(4)
                ^