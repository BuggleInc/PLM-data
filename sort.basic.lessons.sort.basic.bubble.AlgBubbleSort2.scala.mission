<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
  </style>
</head><body>
<!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h1>Tri ? bulle (deuxi?me version)</h1>

<p>En ?tudiant le comportement du tri ? bulle, on peut voir une premi?re
optimisation facile ? effectuer: Apr?s un parcours, le dernier ?l?ment du
tableau est forc?ment le plus grand d'entre tous car le parcours l'a fait
remonter comme une bulle ? sa position. Plus g?n?ralement, apr?s N parcours,
on sait que les N derniers ?l?ments du tableau sont d?j? tri?s. En
conclusion, il n'est pas utile de les recomparer sur les parcours
suivants. Dans un premier temps, nous ferons autant de parcours qu'il y a
d'?l?ments dans le tableau.</p>

<a href="#tip-2">Montrer l'indice (le pseudo-code)</a>

<p>Lorsqu'on ex?cute cet algorithme, il peut ?tre un peu d?cevant de constater
qu'il s'ex?cute ? la m?me vitesse que la version de base de
BubbleSort. C'est un effet graphique seulement puisque seules les
changements de valeurs dans le tableau sont repr?sent?es. Comme cette
variante consiste ? ?viter des comparaisons inutiles, elle effectue tr?s
exactement le m?me nombre d'?changes que la version de base. Il est donc
normal que notre interface graphique la repr?sente ? la m?me vitesse que la
version de base. Mais les statistiques sur le nombre de lectures montrent
bien que l'on a ?conomis? plus d'un quart du nombre de lectures, ce qui
n'est pas si mal.</p>

<p>D'un point de vue complexit? algorithmique, cela ne change rien: cette
variante est toujours en O(n2) en moyenne (on ne gagne que sur la
constante).</p>
</body></html>