override def run() {
  
  var x:Int = 0
  var y:Int = 0
  
  for (i<- 0 to getMondeHauteur()-1){
    for (j<- 0 to getMondeLargeur()-1){
      if (aBiscuit(j,i)==true){x=j;y=i}  // trouve le Baggle
    }
  }

  var cpt:Int =0
  
  recurs (x,y,cpt)
  
  while (estSurBiscuit==false){
    test(x,y) match{
      case 0 => setDirection(Direction.NORD);avance()
      case 1 => setDirection(Direction.SUD);avance()
      case 2 => setDirection(Direction.EST);avance()
      case 3 => setDirection(Direction.OUEST);avance()
    }
  }
  prendBiscuit()

  
    // Your code here
}



def aMurSud(x:Int,y:Int):Boolean = {  // test mur au SUD
  if (y!=getMondeHauteur-1){
    if (aMurNord(x,y+1)==false){return false}
  }
  return true
}
def aMurEst(x:Int,y:Int):Boolean = {   // test mur Ã  l'EST
  if (x!=getMondeLargeur-1 ){
    if (aMurOuest(x+1,y)==false){return false}
  }
  return true
}

def recurs (x:Int,y:Int,num:Int){   // numerote tout
  
  if (getIndication(x,y)==9999 || num<getIndication(x,y)){ // on met le numero si c'est pertinent
      setIndication(x,y,num)
    if (aMurNord(x,y)==false){recurs(x,y-1,num+1)}
    if (aMurSud(x,y)==false){recurs(x,y+1,num+1)}
    if (aMurEst(x,y)==false){recurs(x+1,y,num+1)}
    if (aMurOuest(x,y)==false){recurs(x-1,y,num+1)}
  } 
  

}

def test(x:Int,y:Int) :Int ={
  if (aMurNord(x,y)==false && getIndication(x,y-1)<getIndication(x,y)){return 0}
  else if (aMurSud(x,y)==false && getIndication(x,y+1)<getIndication(x,y)){return 1}
  else if (aMurEst(x,y)==false && getIndication(x+1,y)<getIndication(x,y)){return 2}
  else  {return 3}

}
