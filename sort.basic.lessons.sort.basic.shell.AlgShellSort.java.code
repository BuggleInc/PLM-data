public void shellSort()  {

	int lgr = getNombreValeurs();
	int ecart = lgr / 2 ;
	int x = 0;
	int j=0;
	
	while(ecart>0)
	{
			
			
			for(int i = 1 ; i < lgr; i++)
			{
				x = getValeur(i);
				j=i;
				int k=1;
								
				while((j-(k*ecart))>0 && getValeur(j-(k*ecart))>x)
				{
					setValeur(j, getValeur(j-(k*ecart)));
					k++;
				}
				setValeur(j,x);
			}
			ecart = ecart / 2;
	}
}
/*
ecart=lgr/2
tant que ecart>0:
  appliquer l'algorithme de tri par insertion en comparant i-ecart et i, puis i-2ecart et i-ecart, puis i-3ecart et i-2ecart, etc.
*/

/*

public void insertionSort() {
	int lgr = getNombreValeurs();
	int x = 0;
	int j=0;
	for(int i = 1 ; i < lgr; i++)
	{
		x = getValeur(i);
		j=i;
		
		while(j>0 && getValeur(j-1)>x)
		{
			setValeur(j, getValeur(j-1));
			j--;
		}
		setValeur(j,x);
	}
}

procédure tri_insertion(tableau T, entier n)
      pour i de 1 à n-1
          x ? T[i]
          j ? i
          tant que j > 0 et T[j - 1] > x
              T[j] ? T[j - 1]
              j ? j - 1
          fin tant que
          T[j] ? x
     fin pour
  fin procédure 
  */



