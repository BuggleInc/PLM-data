override def run() {
  var x = 0
  var y = 0 
  var i = 0
  var indic=0
  var cpt = 0
  val L:Int=getMondeLargeur()
  val H:Int=getMondeHauteur()
  val xBis = trouverBis(0,H,L)
  val yBis = trouverBis(1,H,L)
  setIndication(xBis,yBis,0)
  for (cpt <- 0 to H*L){
    for (x<-0 to L-1; y<- 0 to H-1){
      if (getIndication(x,y)!=9999){
        indic = getIndication(x,y)
        ecrireAdj(x,y,indic,H,L)
      }
    }
   }
  
}

def trouverBis(i:Int,H:Int,L:Int):Int = {
  // i = 0 pour x, 1 pour y
  var abscisse = 0
  var ordonnee = 0
  for (abscisse <- 0 to L-1){
    for (ordonnee <- 0 to H-1){
      if (aBiscuit(abscisse,ordonnee)){
        i match{
          case 0 => return abscisse
          case 1 => return ordonnee
        }
      }
    }
  }
  println("erreur")
  return 0
} // permet de trouver la valeur x (i=0) ou y (i=1) du Biscuit

def fini(H:Int,L:Int):Boolean={
  var x=0
  var y=0
  for (x <- 0 to L-1){
    for (y<- 0 to H-1){
      if (getIndication(x,y)==9999){
        return false
      }
    }
  }
  return true
} // permet de voir si toutes les cases ont été marquées

def ecrireAdj(x:Int,y:Int,indic:Int,H:Int,L:Int){
  var adjX = 0
  var adjY = 0
  // Case gauche
  if(x-1>=0 && !aMurOuest(x,y) && getIndication(x-1,y)==9999){
    setIndication(x-1,y,indic+1)
  }
  // Case droite
  if (x+1<L && !aMurOuest(x+1,y) && getIndication(x+1,y)==9999){
    setIndication(x+1,y,indic+1)
  }
  // Case haut
  if(y-1>=0 && !aMurNord(x,y) && getIndication(x,y-1)==9999){
    setIndication(x,y-1, indic+1)
  }
  //Case Bas
  if(y+1<H && !aMurNord(x,y+1) && getIndication(x,y+1)==9999){
    setIndication(x,y+1, indic+1)
  }
       
      
    
  
}