def haveBaggle():Boolean = {
var vuBiscuit=false;
if (estSurBiscuit()) {
	vuBiscuit=true;
else vuBiscuit=false;
}
return vuBiscuit
}
do {
	avance();avance();avance();avance();avance();avance();recule();recule();recule();recule();
	recule();recule();droite();avance();gauche()
} while(haveBaggle())


/*Vous allez encore une fois écrire une fonction qui sera utilisée par la buggle. Son nom doit être 
haveBaggle, et elle doit renvoyer un booléen indiquant si la colonne face à la buggle contient un 
biscuit ou non. Votre buggle va s'en servir pour chercher la première colonne contenant un biscuit
et s'y arrêter.
Le plus simple pour écrire cette fonction est peut être d'utiliser une variable booléenne vuBiscuit 
indiquant si on a vu un biscuit jusque là. Initialement, elle contient faux.
Ensuite, on avance de 6 cases (le monde contient 7 cases, et on est déjà sur l'une d'entre elles). 
Pour chaque case, si elle contient un biscuit, on range la valeur vrai dans vuBiscuit (et on ne fait 
rien d'autre qu'avancer si non).
Quand on est arrivé à la fin, on recule de 6 cases, et on retourne le contenu de vuBiscuit à 
l'appelant.
Cet exercice est un peu particulier, puisqu'il a deux mondes initiaux, chacun ayant un objectif 
particulier. Votre code doit fonctionner pour chacun d'entre eux. Remarquez que le menu déroulant de 
sélection du monde (juste sous la barre de réglage de la vitesse) permet de spécifier le monde que 
vous souhaitez observer.*/