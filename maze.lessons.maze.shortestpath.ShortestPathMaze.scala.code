override def run() {
  val a:Int = ilEstOuLeBiscuit1()
  whoNeedsAMap(a,ilEstOuLeBiscuit2(a))
  recule()
}


def whoNeedsAMap(x:Int ,y:Int) { // marque le monde (accessible) //
  if (getIndication(x+1,y) > getIndication(x,y) + 1) {
    if (!aMurOuest(x+1,y)) {
      setIndication(x+1,y,getIndication(x,y) + 1)
      whoNeedsAMap(x+1,y)
    }
  }
  if (getIndication(x-1, y) > getIndication(x,y) + 1) {
    if (!aMurOuest(x,y)) {
      setIndication(x-1,y,getIndication(x,y) + 1)
      whoNeedsAMap(x-1,y)
    }
  }
  if (getIndication(x,y+1) > getIndication(x,y) + 1) {
    if (!aMurNord(x,y)) {
      setIndication(x,y+1,getIndication(x,y) + 1)
      whoNeedsAMap(x,y+1)
    }
  }
  if (getIndication(x,y-1) > getIndication(x,y) + 1) {
    if (!aMurNord(x,y-1)) {
      setIndication(x,y-1,getIndication(x,y)+1)
      whoNeedsAMap(x,y-1)
    }
  }
}


def ilEstOuLeBiscuit1():Int = { // trouve l'arriv?e et la marque //
  for (i <- 0 to getMondeLargeur() - 1) {
    for (j <- 0 to getMondeHauteur() - 1) {
      if (hasBaggle(i,j)) {
        setIndication(i,j,0)
        val x:Int = i
        return x
      }
    }
  }
}

def ilEstOuLeBiscuit2(i:Int):Int = {
  for (j <- 0 to getMondeHauteur() - 1) {
    if (hasBaggle(i,j)) {
      val y:Int = j
    	return y
    }
  }
}