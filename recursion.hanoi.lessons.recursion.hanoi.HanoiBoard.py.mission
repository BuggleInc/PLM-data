<html><head>  <style type="text/css">
    body { font-family: tahoma, "Times New Roman", serif; font-size:10px; margin:10px; }
    code { background:#EEEEEE; }
    pre { background: #EEEEEE;
          margin: 5px;
          padding: 6px;
          border: 1px inset;
          width: 640px;
          overflow: auto;
          text-align: left;
          font-family: "Courrier New", "Courrier", monospace; }
   .comment { background:#EEEEEE;
              font-family: "Times New Roman", serif;
              color:#00AA00;
              font-style: italic; }
  </style>
</head><body><!-- Please don't translate this file but l10n/missions/plm.pot (see https://github.com/oster/PLM/wiki/Working-on-translations) -->
<h2>Tower of Hanoi</h2>

<p>The Tower of Hanoi or Towers of Hanoi, also called the Tower of Brahma or
Towers of Brahma, is a mathematical game or puzzle. It consists of three pegs,
and a number of disks of different sizes which can slide onto any peg. The
puzzle starts with the disks in a neat stack in ascending order of size on one
peg, the smallest at the top, thus forming a pyramid.</p>

The objective of the puzzle is to move the entire stack to another peg, obeying the following rules:
<ul>
  <li>Only one disk may be moved at a time.</li>

  <li>Each move consists of taking the upper disk from one of the pegs and
  sliding it onto another peg, on top of the other disks that may already be
  present on that peg.</li>

  <li>No disk may be placed on top of a smaller disk.</li>
</ul>

<h3>Goal of this exercise</h3> 

Write the core of the method: 
<code>solve(src, dst,other, height)</code>

<p>This method will recursively solve the presented problem. The first parameter
named <code>src</code> is the index of the initial tower, the second parameter
<code>dst</code> is the index of the expected final tower, the third parameter 
<code>other</code> is the index of the unused peg while the fourth
parameter <code>height</code> is the height of the tower.</p>

<p>A key to solving this puzzle is to recognize that it can be solved by breaking
the problem down into a collection of smaller problems and further breaking
those problems down into even smaller problems until a solution is reached.</p>

<a href="#tip-1">I don't get it, please give me some extra indications</a>
</body></html>