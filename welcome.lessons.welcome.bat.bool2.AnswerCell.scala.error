alarmClock:3: error: unclosed character literal
    if (day >=1 && day <=5) {return '10:00'} else {return 'off'}
                                    ^alarmClock:3: error: Non-zero integral values may not have a leading zero.
    if (day >=1 && day <=5) {return '10:00'} else {return 'off'}
                                        ^alarmClock:3: error: unclosed character literal
    if (day >=1 && day <=5) {return '10:00'} else {return 'off'}
                                          ^alarmClock:3: error: unclosed character literal
    if (day >=1 && day <=5) {return '10:00'} else {return 'off'}
                                                              ^alarmClock:4: error: unclosed character literal
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
                                           ^alarmClock:4: error: Non-zero integral values may not have a leading zero.
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
                                              ^alarmClock:4: error: unclosed character literal
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
                                                ^alarmClock:4: error: unclosed character literal
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
                                                                ^alarmClock:4: error: Non-zero integral values may not have a leading zero.
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
                                                                    ^alarmClock:4: error: unclosed character literal
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
                                                                      ^alarmClock:-6: error: Missing closing brace `}' assumed here
try {
^alarmClock:1: error: expected class or object definition
def alarmClock(day:Int, vacation:Boolean): String = {
^alarmClock:3: error: unclosed character literal
    if (day >=1 && day <=5) {return '10:00'} else {return 'off'}
                                    ^alarmClock:3: error: Non-zero integral values may not have a leading zero.
    if (day >=1 && day <=5) {return '10:00'} else {return 'off'}
                                        ^alarmClock:3: error: unclosed character literal
    if (day >=1 && day <=5) {return '10:00'} else {return 'off'}
                                          ^alarmClock:3: error: unclosed character literal
    if (day >=1 && day <=5) {return '10:00'} else {return 'off'}
                                                              ^alarmClock:4: error: Missing closing brace `}' assumed here
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
  ^alarmClock:4: error: Missing closing brace `}' assumed here
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
  ^alarmClock:4: error: unclosed character literal
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
                                           ^alarmClock:4: error: Non-zero integral values may not have a leading zero.
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
                                              ^alarmClock:4: error: unclosed character literal
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
                                                ^alarmClock:4: error: unclosed character literal
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
                                                                ^alarmClock:4: error: Non-zero integral values may not have a leading zero.
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
                                                                    ^alarmClock:4: error: unclosed character literal
  } else { if (day >=1 && day <=5) {return '7:00'} else {return '10:00'}} 
                                                                      ^alarmClock:5: error: Missing closing brace `}' assumed here
} 
^