/* Do not change these definitions */
val STOP   = 0;
val NOTURN = 1;
val LEFT   = 2;
val BACK   = 4;
val RIGHT  = 8;

val NEXT_COLOR = 0;
val NEXT_MOVE  = 1;
val NEXT_STATE = 2;

//Pour les couleurs : 0 = blanc, 1 = noir

var rule:Array[Array[Array[Int]]] = Array(Array(Array(1, RIGHT, 0),Array(1, RIGHT, 1)), Array(Array(0, NOTURN, 0), Array(0, NOTURN, 1))) // Change this
var nbSteps:Int = 8342; // Change this

/** init the rule array from a string defining a Langton's ant 
 * 
 *  You can use this method inside your init() method if you want 
 *  to test langton's ant instead of full turmites.
 */


def initLangton(name:String) {
    val nbColors = name.length(); /* As many colors as letters in the ant's name */
 
    rule = new Array[Array[Array[Int]]](1); /* one state only */
    rule(0) = new Array[Array[Int]](nbColors); /* As many colors as letters in the ant's name */
    for (i <- 0 to nbColors-1) {
        rule(0)(i) = new Array[Int](3); /* every command set has 3 elements */ 

        rule(0)(i)(NEXT_COLOR) = (i+1) % nbColors;

        if (name.charAt(i) == 'L') {
            rule(0)(i)(NEXT_MOVE) = LEFT;            
        } else if (name.charAt(i) == 'R') {
            rule(0)(i)(NEXT_MOVE) = RIGHT;
        } else {
            getGame().getLogger().log("Unknown command in your ant's name: "+name.charAt(i));
        }

        rule(0)(i)(NEXT_STATE) = 0; /* only one state */

        // println("{"+rule(0)(i)(NEXT_COLOR)+","+rule(0)(i)(NEXT_MOVE)+","+rule(0)(i)(NEXT_STATE)+"}");
    }
}


def init() {
  var posX:Int = getX()
  var posY:Int = getY()
  var state:Int = 0
  var c:Int = 0
  
  //On place la turmite en (8, 33)
  while (posX != 8) {
    if (posX > 8) {
      gauche()
      avance()
      droite()
    } else {
      droite()
      avance()
      gauche()
    }
    posX = getX()
  }
  while (posY != 33) {
    if (posY > 33) {
      avance()
    } else {
      retourne()
      avance()
      retourne()
    }
    posY = getY()
  }
  
  //On appelle maintenant la boucle
  for (pas <- 0 to nbSteps-1) {
    if (getCouleurSol() == Color.WHITE) {
      c = 0
    } else if (getCouleurSol() == Color.WHITE) {
      c = 1
    }
    var action = rule(state)(c)
    setCouleurSol(action(0))
    if (action(1) == RIGHT) {
      droite()
      avance()
    } else if (action(1) == NOTURN) {
      avance()
    }
    state = action(2)
  }
}

def setCouleurSol(c:Int) {
  if (c == 0) {
    setCouleurBrosse(Color.WHITE)
  } else if (c == 1) {
    setCouleurBrosse(Color.BLACK)
  }
  baisseBrosse()
  leveBrosse()
}