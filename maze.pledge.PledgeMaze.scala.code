def checkMur():Boolean = {
  gauche()
  if (estFaceMur()){
    droite()
    return true
  }
  droite()
  return false
}

def keepHandOnSideWall(a:Int):Int = {
  var sommeAngle:Int = a
  if(!estFaceMur()){
    if (checkMur()){
      avance()
    } else {
      gauche()
      sommeAngle += 1 //
      avance()
      if (!checkMur()){
        gauche()
        sommeAngle += 1 //
        avance()
        if(!checkMur){
          recule()
          droite()
          sommeAngle += -1 /**/
          recule()
          droite()
          sommeAngle += -1 /**/
          avance()
        }
      }
    }
  } else{
    droite()
    sommeAngle += -1 /**/
    if(estFaceMur()){
      gauche();gauche();sommeAngle += 2 //   //
      if(estFaceMur()){
        gauche()
        sommeAngle += 1 //
        avance()
      } else {avance()}
    } else {avance()}
  }
  //while (sommeAngle >= 4){sommeAngle -= 4}
  //while (sommeAngle <= -4){sommeAngle += 4}
  /*if (sommeAngle >= 4){
    print("a")
  }*/
  return sommeAngle
}

def estSurMurNord():Boolean = {
  return getY() == 0
}

def eviteObstacle(){
  var sommeAngle:Int = 0
  do{
  	sommeAngle = keepHandOnSideWall(sommeAngle)
    //print(sommeAngle + " ")
  }while (sommeAngle < 4 || sommeAngle > -4)
  /*if (isDirectionFree(Direction.NORTH)){
    setDirection(Direction.NORTH)
    while(!estFaceMur()){avance()}
  }*/
  //while(!estFaceMur()){avance()}
}

def isDirectionFree(dir:Direction):Boolean = {
  var direct:Direction = getDirection()
  setDirection(dir)
  if (estFaceMur()){
    setDirection(direct)
    return true
  }
  setDirection(direct)
  return false
}

override def run() {
  while (!estSurBiscuit()){
    eviteObstacle()
    print("c")
    if(!estFaceMur()){
      print("b")
      while(!estFaceMur()){avance()}
    }
  }
  prendBiscuit()
}