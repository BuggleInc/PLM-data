def sleepIn(weekday:Boolean, vacation:Boolean): Boolean = {


//return (!vacation && !weekday) || (vacation) ;
return       !(vacation || weekday) || vacation;




	/*
	if (vacation == false) {
		if (weekday) {
			return false;
		} else {
			return true;
		}
	} else {
		return true;
	}*/
}






	



/*|| =OU
 * && =ET
 * 
 * Enfin, il est possible de construire une condition composée de plusieurs sous-conditions reliées 
 * par des opérations booléennes:
cond1 && cond2 est vraie si cond1 et cond2 est vraie (d'ailleurs, si cond1 est fausse, cond2 n'est
même pas évaluée puisqu'on sait déjà que la conjonction des deux propositions ne peut pas être vraie).
cond1 || cond2 est vraie si cond1 ou cond2 est vraie (d'ailleurs, si cond1 est vraie, cond2 n'est même
pas évaluée puisqu'on sait déjà que la disjonction des deux propositions ne peut pas être fausse).
!cond est vraie si cond ne l'est pas.
Quand les expressions deviennent compliquées, il est préférable d'ajouter quelques parenthèses pour
lever toute ambiguïté sur l'ordre d'évaluation. N'hésitez pas à mettre suffisamment de parenthèses 
pour la rendre plus lisible.
 */