def insertionSort() 
{
	for (i <- 1 to getNombreValeurs()-1)
	{
		val item=getValeur(i)
		var iHole=i
		while (iHole>0 && getValeur(iHole-1)>item)
		{
			copie(iHole,getValeur(iHole-1))
			iHole=iHole-1
		}
		copie(iHole,item)
	}
}
/* def insertionSort(a: Array[Int]): Array[Int] = {
  for (i <- 1 until a.length) {
    // A[ i ] is added in the sorted sequence A[0, .. i-1]
    // save A[i] to make a hole at index iHole
    val item = a(i)
    var iHole = i
    // keep moving the hole to next smaller index until A[iHole - 1] is <= item
    while (iHole > 0 && a(iHole - 1) > item) {
      // move hole to next smaller index
      a(iHole) = a(iHole - 1)
      iHole = iHole - 1
    }
    // put item in the hole
    a(iHole) = item
  }
  a
} */
/* Pour tout i dans [1,lgr-1]
  stocker la valeur de la case i dans une variable v
  recopier la case i-1 dans i, si i-1 contient une valeur plus grande que v
  recopier la case i-2 dans i-1, si i-2 contient une valeur plus grande que v
  recopier la case i-3 dans i-2, si i-3 contient une valeur plus grande que v
  recopier la case i-4 dans i-3, si i-4 contient une valeur plus grande que v
  ...
  recopier v dans la dernière case recopiée plus haut */