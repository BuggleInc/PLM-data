override def run()
{
  var nbBases = getNombreBases();
  var nbPos = getNombrePositions();
  var posJoueur = 0;
  var baseJoueur = 0;
  
  //D abord placer le trou au bonne endroit
  
  var baseTrou = getTrouBase();
  var posTrou = getTrouPosition();
  
  for (nCouleur <- 0 to 0) //On trie chacune des bases (=couleurs)
  {
    for (nBase <- 0 to nbBases-1)
    {
      if (nBase != nCouleur) //On ne regarde pas la base en cours de tri
      {
        for (nPos <- 0 to nbPos-1)
        {
          if (getCouleurJoueur(nBase, nPos) == nCouleur) //On a trouve un joueur de la bonne couleur
          {
            deplacerTrou((nBase+1)%nbBases, 0, -1);
            deplacerJoueur(nPos, nCouleur, 1);
            /*
            if (getTrouBase() != baseTrou) 
            {
              deplacerTrou((baseTrou+1)%nbBases, 0, -1);
              deplace(baseTrou, posTrou);
            }*/
            return;
          }
        }
      }
  	}
  }
}


def deplacerTrou(arrive:Int, pos:Int, sens:Int) //sens:-1 ou 1
{
  if (arrive == getTrouBase()) return;
  
  var nextBase = mod(getTrouBase()+sens, getNombreBases());
  
  deplace(nextBase, pos);
  deplacerTrou(arrive, pos, sens);
}


def deplacerJoueur(pos:Int, arrive:Int, sens:Int)
{
  var nbBases = getNombreBases();
  var nbPos = getNombrePositions();
  var baseTrou = getTrouBase();
  var posTrou = getTrouPosition();
  var nouvPos = 0;
  
  var currBase = mod(getTrouBase()-sens, nbBases);
    
  while (currBase != mod(arrive-1, nbBases)) //On deplace le joueur dans sa base
  {
    //Le trou est au dessus du joueur
    currBase = mod(getTrouBase()-sens, nbBases);
    nouvPos = getTrouPosition();
    
    deplace(currBase, pos);
    currBase = mod(currBase+sens, nbBases);
    
    deplace(currBase, (nouvPos+1)%nbPos);
    deplace(mod(currBase+sens, nbBases), 0);
  }
  
  deplace(currBase, pos);
  currBase = getTrouBase();
  
  var posEchange = (pos+1)%nbPos;
  
  while (currBase != mod(baseTrou-1, nbBases)) //On annule les autres changements
  {
    //Le trou est sur le joueur
    deplace(mod(currBase-1, nbBases), 0);
    
    currBase = mod(getTrouBase()-1, nbBases);
    
    //nouvPos = getTrouPosition();
    
    deplace(currBase, posEchange);
    deplace(currBase, pos);
    currBase = mod(currBase-1, nbBases);
  }
}
  
def chercheJoueur(couleur:Int, base:Int):Int =
{
  var nbPos = getNombrePositions();
  
  for (i <- 0 to nbPos-1)
  {
    if (getCouleurJoueur(base, i) == couleur) return i;
  }
  return -1;
}

def cherchePasJoueur(couleur:Int, base:Int):Int =
{
  var nbPos = getNombrePositions();
  
  for (i <- 0 to nbPos-1)
  {
    if (getCouleurJoueur(base, i) != couleur) return i;
  }
  return -1;
}

def mod(x:Int, n:Int):Int =
{
  var res = x%n;
  
  if (res >= 0) return res;
  else return mod(res+n, n);
}