override def run()
{
  var nbBases = getNombreBases();
  var nbPos = getNombrePositions();
  var posJoueur = 0;
  var baseJoueur = 0;
  
  //On place le trou au bonne endroit
  var origBaseTrou = 0;
  var cpt = 0;
  
  for (i <- 0 to nbBases-1) //Trouve la couleur qui contient un trou
  {
    cpt = 0;
    for (j <- 0 to nbBases-1)
    {
      for (k <- 0 to nbPos-1)
      {
      	if (getCouleurJoueur(j,k) == i) cpt += 1;
      }
    }
    if (cpt < nbPos) origBaseTrou = i;
  }
  
  deplacerTrou(origBaseTrou, 0, 1);
  
  var origPosTrou = getTrouPosition();
  
  //On trie
  for (nCouleur <- 0 to 0) //On trie chacune des bases (=couleurs)
  {
    for (nBase <- 0 to nbBases-1)
    {
      if (nBase != nCouleur) //On ne regarde pas la base en cours de tri
      {
        for (nPos <- 0 to nbPos-1)
        {
          if (getCouleurJoueur(nBase, nPos) == nCouleur) //On a trouve un joueur de la bonne couleur
          {
            deplacerJoueur(nPos, nBase, nCouleur, origBaseTrou, origPosTrou);
            
          }
        }
      }
  	}
  }
}


def deplacerTrou(arrive:Int, pos:Int, sens:Int) //sens:-1 ou 1
{
  if (arrive == getTrouBase()) return;
  
  var nextBase = mod(getTrouBase()+sens, getNombreBases());
  
  deplace(nextBase, pos);
  deplacerTrou(arrive, pos, sens);
}


def deplacerJoueur(pos:Int, depart:Int, arrive:Int, origBaseTrou:Int, origPosTrou:Int)
{  
  var nbBases = getNombreBases();
  var nbPos = getNombrePositions();
  
  //On deplace le trou au dessus du joueur
  deplacerTrou((depart+1)%nbBases, 0, -1);

  var baseTrou = getTrouBase();
  var posTrou = getTrouPosition();
  var nouvPos = 0;
  var currBase = mod(getTrouBase()-1, nbBases);
    
  while (currBase != mod(arrive-1, nbBases)) //On deplace le joueur dans sa base
  {
    //Le trou est au dessus du joueur
    currBase = mod(getTrouBase()-1, nbBases);
    nouvPos = getTrouPosition();
    
    deplace(currBase, pos);
    currBase = mod(currBase+1, nbBases);
    
    deplace(currBase, (nouvPos+1)%nbPos);
    deplace(mod(currBase+1, nbBases), 0);
  }
  
  deplace(currBase, pos);
  currBase = getTrouBase();
  
  //On annule tous les autres changements
  var posEchange = (pos+1)%nbPos;
  
  while (currBase != baseTrou)
  {
    //Le trou est sur le joueur
    deplace(mod(currBase-1, nbBases), 0);
    deplace(currBase, posEchange);
    posEchange = 0;
    currBase = mod(getTrouBase()-1, nbBases);    
    deplace(currBase, 1);
  }
  
  deplace(mod(currBase-1, nbBases), 0);
  deplace(currBase, posEchange);
  
  if (getTrouBase() != origBaseTrou) 
  {
    deplacerTrou((origBaseTrou+1)%nbBases, 0, 1);
    deplace(origBaseTrou, origPosTrou);
  }
}
  
def chercheJoueur(couleur:Int, base:Int):Int =
{
  var nbPos = getNombrePositions();
  
  for (i <- 0 to nbPos-1)
  {
    if (getCouleurJoueur(base, i) == couleur) return i;
  }
  return -1;
}

def cherchePasJoueur(couleur:Int, base:Int):Int =
{
  var nbPos = getNombrePositions();
  
  for (i <- 0 to nbPos-1)
  {
    if (getCouleurJoueur(base, i) != couleur) return i;
  }
  return -1;
}

def mod(x:Int, n:Int):Int =
{
  var res = x%n;
  
  if (res >= 0) return res;
  else return mod(res+n, n);
}