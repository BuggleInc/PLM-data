override def run() {
  var largeur : Int = getMondeLargeur()
  var hauteur : Int = getMondeHauteur()
  var sortie : Int = chercherSortie(largeur, hauteur)
  ecritMessage(sortie)
  var sorx : Int = sortie % 7
  var sory : Int = sortie / 7
  var Ttraite = new Array[Boolean](hauteur * largeur)
  var Tvaleur = new Array[Int](hauteur * largeur)
  var variableEnTraitement : Int = 0
  var min = 0
  var positionBuggleX : Int = getX()
  var positionBuggleY : Int = getY()
  //ecritMessage(sory)
  setIndication(sorx, sory, 0)
  //ecritMessage("ca va":String)
  do{
    if (min == 0){
      traiterLaCase(0, hauteur, largeur)
    }else{
      for (i <- 0 to Tvaleur.length - 1){
        if (Tvaleur(i) == min && !Ttraite(i)){
          traiterLaCase(i, hauteur, largeur)
        }
      }
    }
    min = min + 1
  }while(Ttraite(positionBuggleX + positionBuggleY))
  var nb : Int = min - 1
  while (!estSurBiscuit()){
    var x : Int = getX()
    var y : Int = getY()
    setDirection(Direction.NORD)
    if (!estFaceMur()){
      if (getIndication(x, y - 1)== nb - 1){avance()}
    }else{
      setDirection(Direction.OUEST)
    		if (!estFaceMur()){
      		if (getIndication(x - 1, y)== nb - 1){avance()}
    		}else{
          setDirection(Direction.EST)
    				if (!estFaceMur()){
      				if (getIndication(x + 1, y)== nb - 1){avance()}
        		}else{
              setDirection(Direction.SUD)
    						if (!estFaceMur()){
      						if (getIndication(x, y + 1)== nb - 1){avance()}
            		}
            }
        }
    }
  }
}

def chercherSortie(largeur : Int, hauteur : Int) : Int={
  for (x <- 0 to largeur - 1){
    for (y <- 0 to hauteur - 1){
      var a : Int = 0
      if (aBiscuit(x, y)){return y * largeur + x}
    }
  }
  return (9999 + 9999)
}

def traiterLaCase(i : Int, hauteur : Int, largeur : Int) : Unit = {
  var x : Int = i % 7
  var y : Int = i / 7
  var X : Int = 0
  var Y : Int = 0
  var messageTraitement : Int = getIndication(x, y)
  if (!aMurNord(x, y)) {
    X = x
    Y = y - 1
    modifierCase(X, Y, messageTraitement)
  }
  if (!aMurOuest(x, y)) {
    X = x - 1
    Y = y
    modifierCase(X, Y, messageTraitement)
  }
  if (x < largeur){
    X = x + 1
    Y = y
    if (!aMurOuest(X, Y)){
      modifierCase(X, Y, messageTraitement)
    }
  }
  if (y < hauteur){
    X = x
    Y = y + 1
    if (!aMurNord(X, Y)){
      modifierCase(X, Y, messageTraitement)
    }
  }
}

def modifierCase(X : Int, Y : Int, messageTraitement : Int) : Unit = {
  var messageAdjacent : Int = getIndication(X, Y)
  if (messageAdjacent == 9999 || messageAdjacent > messageTraitement + 1){
    setIndication(X, Y, messageTraitement + 1)
  }
}