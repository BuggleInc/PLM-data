def isWallAtLeft () : Boolean = {
  left();
  var answer = isFacingWall();
  right();
  return answer;
}

def isDirectionFree (direction : Direction) : Boolean = {
  var pos = getDirection();
  setDirection(direction);
 	var answer = !isFacingWall();
  setDirection(pos); // bring back to the initial position
  return answer;
}

// convoluted with staying the wall at the left :
def leftFollowerMode(sommeAngle : Int) : Int = {
  while ((getDirection() != Direction.NORTH) || isFacingWall()) {
    if (isOverBaggle()) {
      return();
    } else {
        if (!isFacingWall()) {
          forward();
          if (!isWallAtLeft()) {
            left();
            sommeAngle += 1;
            forward();
            if (!isWallAtLeft()) {
              left();
              sommeAngle += 1;
              forward();
            }
          }
        } else { right(); sommeAngle -= 1;} 
     }
	}
}

def northRunnerMode () {
  while (getDirection() != Direction.NORTH) { // auto-orientation
    right();
  }
  while (!isFacingWall()) { // forward as long is possible
  		forward();
  }
}

def makeMoving() {
  var state = 0;
  var sommeAngle = 0;
  while (!isOverBaggle()) {
    state match {
      case 0 => if (sommeAngle%4 != 0) {
        						northRunnerMode(); 
        						state = 1;
      					} // while we don't find a wall on the north
      case 1 =>  while (!isWallAtLeft()) { 
        						right(); // make sure that there is a wall on the left
      					 }; leftFollowerMode(sommeAngle); state = 0;
      case _ => println("Error : this case should not happen.")
    }
  }
  pickupBaggle();
}

override def run() { 
  makeMoving();
}